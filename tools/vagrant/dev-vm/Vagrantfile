# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

$provisioning_script = <<SCRIPT
set -ex
if test -n "$1" ; then
  # Exporting the proxies for this session
  export http_proxy=$1
  export https_proxy=$2
  # Exporting the proxies permanently for all the users
  cat >> /etc/profile <<EOF
export http_proxy=$1
export https_proxy=$2
EOF
fi

# Make swap
fallocate -l 2G /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
echo "/swapfile none swap defaults 0 0" >>/etc/fstab

# System additions and upgrades
sed -i '/^deb/s/ universe/ universe multiverse/' /etc/apt/sources.list
apt-get -y install dnsmasq && until host archive.ubuntu.com &>/dev/null ; do sleep .1 ; done
apt-get update
apt-get -y dist-upgrade

# Required by yocto
apt-get -y install gawk wget git git-core diffstat unzip texinfo gcc-multilib  build-essential chrpath screen curl device-tree-compiler socat git-review

# Developer tools
apt-get -y install vagrant strace linux-tools-common uncrustify doxygen cmake cmake-curses-gui manpages-posix-dev manpages-dev zlib1g-dev

# Remote X server
apt-get install -y software-properties-common
add-apt-repository -y ppa:x2go/stable
apt-get update
apt-get install -y x2goserver x2goserver-xsession

if test -n "$1" ; then
  proxyhost=`echo $http_proxy | awk -F: '{ print substr($2,3); }'`
  proxyport=`echo $http_proxy | awk -F: '{ print $3 }'`
  cat > /home/vagrant/.ssh/config <<EOF
Host *.openswitch.net
  ProxyCommand socat - PROXY:$proxyhost:%h:%p,proxyport=$proxyport
EOF
fi
cat > /home/vagrant/.gitconfig <<EOF
[alias]
	br = branch
	st = status

[color]
	ui = auto

[branch]
	autosetuprebase = always
EOF
chown vagrant:vagrant /home/vagrant/.gitconfig

# Clean up
set +x
apt-get -y autoremove
for i in 0 1 ; do ip addr show dev eth$i ; done
if [ -a /var/run/reboot-required ] ; then
  echo ; echo Run \\"vagrant reload\\" to use the new machine
  poweroff
fi

SCRIPT

module OS
  def OS.windows?
    (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
  end
end

if OS.windows? then
  $user = ENV['USERNAME']
  $home = ENV['HOMEPATH']
  $homemounttype = "virtualbox"
else
  $user = ENV['USER']
  $home = ENV['HOME']
  $homemounttype = "nfs"
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "ubuntu/trusty64"

  config.vm.hostname = $user + "-dev"

  # Make the machine appear as another machine in the network
  #config.vm.network "public_network"
  # Create a private network used for NFS shared folders
  config.vm.network "private_network", type: :dhcp

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder $home, "/home/" + $user, type: $homemounttype

  config.vm.provider "virtualbox" do |vb|
     host = RbConfig::CONFIG['host_os']

     # Give VM 1/4 system memory & access to all cpu cores on the host
     if host =~ /darwin/
        cpus = `sysctl -n hw.ncpu`.to_i
        # sysctl returns Bytes and we need to convert to MB
        mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 4
     elsif host =~ /linux/
        cpus = `nproc`.to_i
        # meminfo shows KB and we need to convert to MB
        mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 4
     else # Assume windows
        cpus = ENV['NUMBER_OF_PROCESSORS']
        mem = /([0-9]+)/.match(`wmic os get TotalVisibleMemorySize`).captures[0].to_i / 1024 / 4
     end
     vb.name = $user + "-dev"
     vb.memory = mem
     vb.cpus = cpus
  end
  config.vm.provision "shell" do |s|
    s.inline = $provisioning_script
    s.args = ENV.has_key?('http_proxy') ? ENV['http_proxy'] : "", ENV.has_key?('https_proxy') ? ENV['https_proxy'] : ""
  end
end
