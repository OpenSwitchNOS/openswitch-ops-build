# -*- mode: ruby -*-
# vi: set ft=ruby :

# Specify Vagrant version and Vagrant API version
Vagrant.require_version ">= 1.6.0"
VAGRANTFILE_API_VERSION = "2"

$provisioning_script = <<SCRIPT

set -ex

if [ -n $http_proxy ]
then
  export proxyhost=`echo $http_proxy | awk -F: '{ print substr($2,3); }'`
  export proxyport=`echo $http_proxy | awk -F: '{ print $3 }'`
  sudo -E bash -c 'cat > /home/vagrant/.ssh/config <<EOF
Host *.openswitch.net
  ProxyCommand socat - PROXY:$proxyhost:%h:%p,proxyport=$proxyport
EOF'
fi

sudo apt-get update
sudo apt-get -y install gawk wget git diffstat build-essential chrpath screen device-tree-compiler socat python-setuptools texinfo

git clone http://github.com/mininet/mininet ~/mininet
cd ~/mininet; sudo python setup.py install

cd
git clone http://git.openswitch.net/openswitch/ops-build ops-build
cd ops-build
make configure genericx86-64
make
make export_docker_image
docker images

SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.hostname = "ops-host"
  config.vm.box_check_update = false
  config.ssh.insert_key = false
  config.vm.network "private_network", type: "dhcp"
  config.vm.box = "ubuntu/trusty64"

  config.vm.provision  "docker"
  config.vm.provision :reload

  if Vagrant.has_plugin?("vagrant-proxyconf")
     config.proxy.http = ""  # "http://proxy.example.com:8080"
     config.proxy.https = "" # "http://proxy.example.com:8080"
     config.proxy.no_proxy = "localhost,127.0.0.1"
  end

  config.vm.provider "virtualbox" do |vb|

     host = RbConfig::CONFIG['host_os']

     # Give VM 1/4 system memory & access to all cpu cores on the host
     if host =~ /darwin/
        cpus = `sysctl -n hw.ncpu`.to_i
        # sysctl returns Bytes and we need to convert to MB
        mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 4
     elsif host =~ /linux/
        cpus = `nproc`.to_i
        # meminfo shows KB and we need to convert to MB
        mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 4
     else # Assume Windows
        cpus = ENV['NUMBER_OF_PROCESSORS']
        mem = /([0-9]+)/.match(`wmic os get TotalVisibleMemorySize`).captures[0].to_i / 1024 / 4
     end
     vb.name = "ops-host"
     vb.customize ["modifyvm", :id, "--memory", mem]
     vb.customize ["modifyvm", :id, "--cpus", cpus]
  end
  config.vm.provision "shell" do |s|
    s.inline = $provisioning_script
    s.privileged = false
  end
end
