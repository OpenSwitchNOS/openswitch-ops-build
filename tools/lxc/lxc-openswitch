#!/bin/bash

#
# lxc: linux Container library

# Authors:
# Daniel Lezcano <daniel.lezcano@free.fr>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

LXC_MAPPED_UID=
LXC_MAPPED_GID=

# Make sure the usual locations are in PATH
export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3
    link=$4

grep -q "^lxc.rootfs" $path/config 2>/dev/null || echo "lxc.rootfs = $rootfs" >> $path/config
cat <<EOF >> $path/config
lxc.haltsignal = SIGUSR1
lxc.utsname = $name
lxc.tty = 1
lxc.pts = 1
lxc.autodev = 1
lxc.kmsg = 0
lxc.cap.drop = sys_module mac_admin mac_override sys_time

lxc.network.type = macvlan
lxc.network.macvlan.mode = private
lxc.network.flags = up
lxc.network.link = $link
lxc.network.name = eth0
lxc.network.mtu = 1500

# When using LXC with apparmor, uncomment the next line to run unconfined:
lxc.aa_profile = unconfined
EOF

    echo "lxc.mount.entry = /sys/kernel/security sys/kernel/security none ro,bind,optional 0 0" >>$path/config
    echo "lxc.mount.auto = proc:mixed sys cgroup" >>$path/config
}


install_openswitch()
{
    rootfs=$1
    mkdir -p $rootfs
    tar xf $OPENSWITCH_IMAGE -C $rootfs
}

configure_systemd() {
    path=$1
    rootfs=$2
    
    # this only works if we have getty@.service to manipulate
    if [ -f ${rootfs}/lib/systemd/system/getty\@.service ]; then
       sed -e 's/^ConditionPathExists=/# ConditionPathExists=/' \
           -e 's/After=dev-%i.device/After=/' \
           < ${rootfs}/lib/systemd/system/getty\@.service \
           > ${rootfs}/etc/systemd/system/getty\@.service
    fi

#    rm -f ${rootfs}/etc/systemd/system/default.target
    rm -f ${rootfs}/etc/systemd/system/getty.target.wants/serial-getty@ttyS0.service
#    touch ${rootfs}/etc/fstab
#    chroot ${rootfs} ln -s /dev/null /etc/systemd/system/udev.service
#    chroot ${rootfs} ln -s /dev/null /etc/systemd/system/systemd-udevd.service
#    chroot ${rootfs} ln -s /dev/null /etc/systemd/system/systemd-udevd-kernel.socket
#    chroot ${rootfs} ln -s /dev/null /etc/systemd/system/proc-sys-fs-binfmt_misc.automount
#    chroot ${rootfs} ln -s /lib/systemd/system/multi-user.target /etc/systemd/system/default.target
    # Make systemd honor SIGPWR
    chroot ${rootfs} ln -s /lib/systemd/system/halt.target /etc/systemd/system/sigpwr.target

    return 0
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path>
EOF
    return 0
}

options=$(getopt -o hp:n: -l help,rootfs:,path:,name:,mapped-uid:,mapped-gid: -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        -p|--path)      path=$2; shift 2;;
        --rootfs)       rootfs=$2; shift 2;;
        -n|--name)      name=$2; shift 2;;
        --mapped-uid)   LXC_MAPPED_UID=$2; shift 2;;
        --mapped-gid)   LXC_MAPPED_GID=$2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ -z "$OPENSWITCH_IMAGE" ]; then
    echo "'OPENSWITCH_IMAGE' variable is required"
    exit 1
fi

link="eth0"
if [ ! -z "$OPENSWITCH_LXC_MACVLAN_INTERFACE" ]; then
    link="$OPENSWITCH_LXC_MACVLAN_INTERFACE"
fi
echo "Setting the external macvlan interface to $link"

# detect rootfs
config="$path/config"
if [ -z "$rootfs" ]; then
    if grep -q '^lxc.rootfs' $config 2> /dev/null ; then
        rootfs=$(awk -F= '/^lxc.rootfs =/{ print $2 }' $config)
    else
        rootfs=$path/rootfs
    fi
fi

copy_configuration $path $rootfs $name $link
if [ -f "$LXC_MACHINE_CONFIG_SCRIPT" ]; then
    source $LXC_MACHINE_CONFIG_SCRIPT
    copy_machine_configuration $path $rootfs $name $link
fi

if [ $? -ne 0 ]; then
    echo "failed to write configuration file"
    exit 1
fi

install_openswitch $rootfs
if [ $? -ne 0 ]; then
    echo "failed to install openswitch"
    exit 1
fi

configure_systemd $path $rootfs
if [ $? -ne 0 ]; then
    echo "failed to configure systemd"
    exit 1
fi
