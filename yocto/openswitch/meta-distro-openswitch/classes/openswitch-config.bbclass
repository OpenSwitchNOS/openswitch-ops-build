#
# Parse .ops-config file and add Kconfig symbol as IMAGE_FEATURES based on
# what's been enabled by user via Kconfig mechanism.
#
# .ops-config is autogenerated by Kconfig. Assumptions by parser logic with
# respect to autogenerated Kconfig symbols:
#
#  - Disabled symbols are either not present or commented out (start with '#')
#  - All enabled symbols start with OPS_CONFIG_
#  - '=' separates symbols from values assigned.
#  - Enabled bool symbols end with '=y' and added to IMAGE_FEATURES
#  - Enabled symbols not ending with '=y' are of type string/hex/int
#
# Current limitations of parser logic:
#  - Symbols of type 'tristate' (modules) are not supported
#  - string/hex/int symbols are not added to IMAGE_FEATURES but are accessible
#    via ops-autoconf.h
#
python __anonymous () {

    config_file_path = d.getVar("TOPDIR") + "/.ops-config"

    try:
        config_file = open(config_file_path, "r")
    except IOError:
        return 0

    for line in config_file:
        line = line.strip()
        if line.startswith("OPS_CONFIG_"):
            config_param = line.split('=', 1)
            if config_param[1] == 'y':
                ops_feature = " " + config_param[0].split('_', 2)[2]
                d.appendVar("IMAGE_FEATURES", ops_feature)

    config_file.close()
}

#
# Following section maps feature to package group
#  - Syntax: FEATURE_PACKAGES_<Kconfig symbol> = "<zero or more packages>"
#  - Every Kconfig symbol should have a package group defined
#  - Package group with zero packages occur if a Kconfig symbol is to be treated
#    as a flag and not as a feature
#
FEATURE_PACKAGES_BUFMON = "ops-bufmond"
FEATURE_PACKAGES_BROADVIEW = "ops-broadview"
FEATURE_PACKAGES_AS5712 = ""
FEATURE_PACKAGES_OVS_SIM = ""
FEATURE_PACKAGES_DOCKER = ""
