--- linux-3.4.24-orig/arch/powerpc/kernel/fsl_booke_entry_mapping.S	2012-12-17 10:38:05.000000000 -0800
+++ linux-3.4.24/arch/powerpc/kernel/fsl_booke_entry_mapping.S	2013-02-12 10:23:47.749475136 -0800
@@ -165,10 +165,10 @@ skpinv:	addi	r6,r6,1				/* Increment */
 	lis	r6,0x1000		/* Set MAS0(TLBSEL) = TLB1(1), ESEL = 0 */
 	mtspr	SPRN_MAS0,r6
 	lis	r6,(MAS1_VALID|MAS1_IPROT)@h
-	ori	r6,r6,(MAS1_TSIZE(BOOK3E_PAGESZ_64M))@l
+	ori	r6,r6,(MAS1_TSIZE(BOOK3E_PAGESZ_1GB))@l
 	mtspr	SPRN_MAS1,r6
-	lis	r6,MAS2_VAL(PAGE_OFFSET, BOOK3E_PAGESZ_64M, M_IF_SMP)@h
-	ori	r6,r6,MAS2_VAL(PAGE_OFFSET, BOOK3E_PAGESZ_64M, M_IF_SMP)@l
+	lis	r6,MAS2_VAL(PAGE_OFFSET, BOOK3E_PAGESZ_1GB, M_IF_SMP)@h
+	ori	r6,r6,MAS2_VAL(PAGE_OFFSET, BOOK3E_PAGESZ_1GB, M_IF_SMP)@l
 	mtspr	SPRN_MAS2,r6
 	mtspr	SPRN_MAS3,r8
 	tlbwe
--- linux-3.4.24-orig/arch/powerpc/kernel/head_fsl_booke.S	2012-12-17 10:38:05.000000000 -0800
+++ linux-3.4.24/arch/powerpc/kernel/head_fsl_booke.S	2013-02-12 10:31:17.380396847 -0800
@@ -91,8 +91,8 @@ _ENTRY(_start);
 /* We try to not make any assumptions about how the boot loader
  * setup or used the TLBs.  We invalidate all mappings from the
  * boot loader and load a single entry in TLB1[0] to map the
- * first 64M of kernel memory.  Any boot info passed from the
- * bootloader needs to live in this first 64M.
+ * first 1GB of kernel memory.  Any boot info passed from the
+ * bootloader needs to live in this first 1GB.
  *
  * Requirement on bootloader:
  *  - The page we're executing in needs to reside in TLB1 and
--- linux-3.4.24-orig/arch/powerpc/mm/fsl_booke_mmu.c	2012-12-17 10:38:05.000000000 -0800
+++ linux-3.4.24/arch/powerpc/mm/fsl_booke_mmu.c	2013-02-12 10:30:58.709317658 -0800
@@ -238,7 +238,7 @@ void setup_initial_memory_limit(phys_add
 {
 	phys_addr_t limit = first_memblock_base + first_memblock_size;
 
-	/* 64M mapped initially according to head_fsl_booke.S */
-	memblock_set_current_limit(min_t(u64, limit, 0x04000000));
+	/* 1GB mapped initially according to head_fsl_booke.S */
+	memblock_set_current_limit(min_t(u64, limit, 0x40000000));
 }
 #endif
