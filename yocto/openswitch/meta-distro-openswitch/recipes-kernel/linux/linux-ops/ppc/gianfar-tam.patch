--- linux-3.8-orig/drivers/net/ethernet/freescale/gianfar.c	2013-02-18 15:58:34.000000000 -0800
+++ linux-3.8/drivers/net/ethernet/freescale/gianfar.c	2013-04-22 14:49:37.455497046 -0700
@@ -99,8 +99,12 @@
 #include <linux/of.h>
 #include <linux/of_net.h>
 
+#include <linux/proc_fs.h>
+
 #include "gianfar.h"
 
+#include <linux/brcmphy.h>
+
 #define TX_TIMEOUT      (1*HZ)
 
 const char gfar_driver_version[] = "1.3";
@@ -147,6 +151,13 @@ MODULE_AUTHOR("Freescale Semiconductor, 
 MODULE_DESCRIPTION("Gianfar Ethernet Driver");
 MODULE_LICENSE("GPL");
 
+#define GFAR_MAX_DRIVERS 4
+struct proc_dir_entry *gfar_dir[GFAR_MAX_DRIVERS];
+struct proc_dir_entry *gfar_dir_entry[GFAR_MAX_DRIVERS];
+int gfar_driver_count = 0;
+char packetSaveSpace[201];
+int packetSaveLen;
+
 static void gfar_init_rxbdp(struct gfar_priv_rx_q *rx_queue, struct rxbd8 *bdp,
 			    dma_addr_t buf)
 {
@@ -612,8 +623,10 @@ static int gfar_of_init(struct platform_
 	const u32 *stash;
 	const u32 *stash_len;
 	const u32 *stash_idx;
+        const u32 *disable_hw_csum;
+        const u32 *need_extra_padding;
 	unsigned int num_tx_qs, num_rx_qs;
-	u32 *tx_queues, *rx_queues;
+        u32 *tx_queues, *rx_queues, *tx_ring_sizes, *rx_ring_sizes;
 
 	if (!np || !of_device_is_available(np))
 		return -ENODEV;
@@ -621,6 +634,7 @@ static int gfar_of_init(struct platform_
 	/* parse the num of tx and rx queues */
 	tx_queues = (u32 *)of_get_property(np, "fsl,num_tx_queues", NULL);
 	num_tx_qs = tx_queues ? *tx_queues : 1;
+        pr_info("Initializing gianfar with %d Tx Queues\n", num_tx_qs);
 
 	if (num_tx_qs > MAX_TX_QS) {
 		pr_err("num_tx_qs(=%d) greater than MAX_TX_QS(=%d)\n",
@@ -631,6 +645,7 @@ static int gfar_of_init(struct platform_
 
 	rx_queues = (u32 *)of_get_property(np, "fsl,num_rx_queues", NULL);
 	num_rx_qs = rx_queues ? *rx_queues : 1;
+        pr_info("Initializing gianfar with %d Rx Queues\n", num_rx_qs);
 
 	if (num_rx_qs > MAX_RX_QS) {
 		pr_err("num_rx_qs(=%d) greater than MAX_RX_QS(=%d)\n",
@@ -683,6 +698,9 @@ static int gfar_of_init(struct platform_
 	for (i = 0; i < priv->num_rx_queues; i++)
 		priv->rx_queue[i] = NULL;
 
+        // Get the sizes of all the queues
+        tx_ring_sizes = (u32 *)of_get_property(np, "fsl,tx_ring_sizes", NULL);
+
 	for (i = 0; i < priv->num_tx_queues; i++) {
 		priv->tx_queue[i] = kzalloc(sizeof(struct gfar_priv_tx_q),
 					    GFP_KERNEL);
@@ -693,9 +711,21 @@ static int gfar_of_init(struct platform_
 		priv->tx_queue[i]->tx_skbuff = NULL;
 		priv->tx_queue[i]->qindex = i;
 		priv->tx_queue[i]->dev = dev;
+                if (tx_ring_sizes)
+                {
+                   priv->tx_queue[i]->tx_ring_size = tx_ring_sizes[i];
+                   priv->tx_queue[i]->num_txbdfree = tx_ring_sizes[i];
+                }
+                else
+                {
+                   priv->tx_queue[i]->tx_ring_size = DEFAULT_TX_RING_SIZE;
+                   priv->tx_queue[i]->num_txbdfree = DEFAULT_TX_RING_SIZE; 
+                }
 		spin_lock_init(&(priv->tx_queue[i]->txlock));
 	}
 
+        // Get the sizes of all the queues
+        rx_ring_sizes = (u32 *)of_get_property(np, "fsl,rx_ring_sizes", NULL);
 	for (i = 0; i < priv->num_rx_queues; i++) {
 		priv->rx_queue[i] = kzalloc(sizeof(struct gfar_priv_rx_q),
 					    GFP_KERNEL);
@@ -706,6 +736,14 @@ static int gfar_of_init(struct platform_
 		priv->rx_queue[i]->rx_skbuff = NULL;
 		priv->rx_queue[i]->qindex = i;
 		priv->rx_queue[i]->dev = dev;
+                if (rx_ring_sizes)
+                {
+                   priv->rx_queue[i]->rx_ring_size = rx_ring_sizes[i];
+                }
+                else
+                {
+                   priv->rx_queue[i]->rx_ring_size = DEFAULT_RX_RING_SIZE;
+                }
 		spin_lock_init(&(priv->rx_queue[i]->rxlock));
 	}
 
@@ -742,16 +780,33 @@ static int gfar_of_init(struct platform_
 				     FSL_GIANFAR_DEV_HAS_MULTI_INTR;
 
 	if (model && !strcasecmp(model, "eTSEC"))
+        {
 		priv->device_flags = FSL_GIANFAR_DEV_HAS_GIGABIT |
 				     FSL_GIANFAR_DEV_HAS_COALESCE |
 				     FSL_GIANFAR_DEV_HAS_RMON |
 				     FSL_GIANFAR_DEV_HAS_MULTI_INTR |
 				     FSL_GIANFAR_DEV_HAS_PADDING |
-				     FSL_GIANFAR_DEV_HAS_CSUM |
 				     FSL_GIANFAR_DEV_HAS_VLAN |
 				     FSL_GIANFAR_DEV_HAS_MAGIC_PACKET |
 				     FSL_GIANFAR_DEV_HAS_EXTENDED_HASH |
 				     FSL_GIANFAR_DEV_HAS_TIMER;
+                disable_hw_csum = of_get_property(np, "disable-hw-csum", NULL);
+                if ((NULL == disable_hw_csum) || ( 0 == *disable_hw_csum))
+                {
+                        // Allow the HW to do the CSUM
+                        priv->device_flags |=  FSL_GIANFAR_DEV_HAS_CSUM;
+
+                }
+                need_extra_padding = of_get_property(np, "extra-padding", NULL);
+                if (need_extra_padding)
+                {
+                        priv->extra_padding = *need_extra_padding;
+                }
+                else
+                {
+                        priv->extra_padding = 0;
+                }
+        }
 
 	ctype = of_get_property(np, "phy-connection-type", NULL);
 
@@ -961,6 +1016,143 @@ static void gfar_detect_errata(struct gf
 			 priv->errata);
 }
 
+static int gfar_dump_debug(char *page, char **start, off_t offset, int count,
+                           int *eof, void *data)
+{
+   int pos = 0;
+   struct net_device *dev = (struct net_device *)data;
+   struct gfar_private *priv = netdev_priv(dev);
+   struct gfar __iomem *regs = priv->gfargrp[0].regs;
+   int i = 0;
+
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "Debug information for %s\n",
+                   dev->name);
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   " Control and Status\n");
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  ECNTRL  0x%08x    DMACTRL 0x%08x\n",
+                   gfar_read(&regs->ecntrl),
+                   gfar_read(&regs->dmactrl));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  TCTRL   0x%08x    TSTAT   0x%08x    TQUEUE   0x%08x\n",
+                   gfar_read(&regs->tctrl),
+                   gfar_read(&regs->tstat),
+                   gfar_read(&regs->tqueue));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  RCTRL   0x%08x    RSTAT   0x%08x    RQUEUE   0x%08x\n",
+                   gfar_read(&regs->rctrl),
+                   gfar_read(&regs->rstat),
+                   gfar_read(&regs->rqueue));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  MACCFG1 0x%08x    MACCFG2 0x%08x    IFSTAT   0x%08x\n",
+                   gfar_read(&regs->maccfg1),
+                   gfar_read(&regs->maccfg2),
+                   gfar_read(&regs->ifstat));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  IPGIFG  0x%08x    MRBLR   0x%08x    MAXFRM   0x%08x\n",
+                   gfar_read(&regs->ipgifg), gfar_read(&regs->mrblr),
+                   gfar_read(&regs->maxfrm));
+
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   " RMON counters\n");
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  RBYT %010d    RPKT %010d    RFCS %010d\n",
+                   gfar_read(&regs->rmon.rbyt),
+                   gfar_read(&regs->rmon.rpkt),
+                   gfar_read(&regs->rmon.rfcs));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  RMCA %010d    RBCA %010d    RXCF %010d\n",
+                   gfar_read(&regs->rmon.rmca),
+                   gfar_read(&regs->rmon.rbca),
+                   gfar_read(&regs->rmon.rxcf));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  RXPF %010d    RXUO %010d    RALN %010d\n",
+                   gfar_read(&regs->rmon.rxpf),
+                   gfar_read(&regs->rmon.rxuo),
+                   gfar_read(&regs->rmon.raln));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  RFLR %010d    RCDE %010d    RCSE %010d\n",
+                   gfar_read(&regs->rmon.rflr),
+                   gfar_read(&regs->rmon.rcde),
+                   gfar_read(&regs->rmon.rcse));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  RUND %010d    ROVR %010d    RFRG %010d\n",
+                   gfar_read(&regs->rmon.rund),
+                   gfar_read(&regs->rmon.rovr),
+                   gfar_read(&regs->rmon.rfrg));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  RJBR %010d    RDRP %010d\n",
+                   gfar_read(&regs->rmon.rjbr),
+                   gfar_read(&regs->rmon.rdrp));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  TBYT %010d    TPKT %010d    TMCA %010d\n",
+                   gfar_read(&regs->rmon.tbyt),
+                   gfar_read(&regs->rmon.tpkt),
+                   gfar_read(&regs->rmon.tmca));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  TBCA %010d    TXPF %010d    TDFR %010d\n",
+                   gfar_read(&regs->rmon.tbca),
+                   gfar_read(&regs->rmon.txpf),
+                   gfar_read(&regs->rmon.tdfr));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  TEDF %010d    TSCL %010d    TMCL %010d\n",
+                   gfar_read(&regs->rmon.tedf),
+                   gfar_read(&regs->rmon.tscl),
+                   gfar_read(&regs->rmon.tmcl));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  TLCL %010d    TXCL %010d    TNCL %010d\n",
+                   gfar_read(&regs->rmon.tlcl),
+                   gfar_read(&regs->rmon.txcl),
+                   gfar_read(&regs->rmon.tncl));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  TDRP %010d    TJBR %010d    TFCS %010d\n",
+                   gfar_read(&regs->rmon.tdrp),
+                   gfar_read(&regs->rmon.tjbr),
+                   gfar_read(&regs->rmon.tfcs));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  TXCF %010d    TOVR %010d    TUND %010d\n",
+                   gfar_read(&regs->rmon.txcf),
+                   gfar_read(&regs->rmon.tovr),
+                   gfar_read(&regs->rmon.tund));
+   pos += snprintf(&page[pos+offset], count - pos, 
+                   "  TFRG %010d\n", gfar_read(&regs->rmon.tfrg));
+
+   pos += snprintf(&page[pos+offset], count -pos,  
+                   "Phy driver name: %s ID: %d, Interface %d\n",
+                   priv->phydev->drv->name, priv->phydev->phy_id,
+                   priv->phydev->interface);
+   pos += snprintf(&page[pos+offset], count -pos,  
+                   "Q specific counters\n");
+   for (i = 0; i < priv->num_rx_queues; i++) {
+      pos += snprintf(&page[pos+offset], count -pos, 
+                      "  Q%d: RX Pkt %08d Rx Bytes %08d Rx Drop %08d\n",i,
+                      (int)priv->rx_queue[i]->stats.rx_packets,
+                      (int)priv->rx_queue[i]->stats.rx_bytes,
+                      (int)priv->rx_queue[i]->stats.rx_dropped);
+   }
+   for (i = 0; i < priv->num_tx_queues; i++) {
+      pos += snprintf(&page[pos+offset], count -pos, 
+                      "  Q%d: TX Pkt %08d Tx Bytes %08d\n",i,
+                      (int)priv->tx_queue[i]->stats.tx_packets,
+                      (int)priv->tx_queue[i]->stats.tx_bytes);
+   }
+
+   // Dump the last packet sent
+   pos += snprintf(&page[pos+offset], count -pos, "Last Packet Sent:\n ");
+   for (i=0; i<packetSaveLen; i++)
+   {
+      pos += snprintf(&page[pos+offset], count -pos, " %02x", 
+                      packetSaveSpace[i]);
+      if (0xf == (i&0xf))
+      {
+         pos += snprintf(&page[pos+offset], count -pos, "\n");
+      }
+   }
+   *eof = 1;
+   return (pos);
+}
+
 /* Set up the ethernet device structure, private data,
  * and anything else we need before we start
  */
@@ -1142,18 +1334,17 @@ static int gfar_probe(struct platform_de
 	gfar_write(&regs->rqueue, rqueue);
 	gfar_write(&regs->tqueue, tqueue);
 
-	priv->rx_buffer_size = DEFAULT_RX_BUFFER_SIZE;
+        priv->rx_buffer_size = ((DEFAULT_RX_BUFFER_SIZE + priv->extra_padding)
+                                & ~(INCREMENTAL_BUFFER_SIZE - 1)) +
+                INCREMENTAL_BUFFER_SIZE;
 
 	/* Initializing some of the rx/tx queue level parameters */
 	for (i = 0; i < priv->num_tx_queues; i++) {
-		priv->tx_queue[i]->tx_ring_size = DEFAULT_TX_RING_SIZE;
-		priv->tx_queue[i]->num_txbdfree = DEFAULT_TX_RING_SIZE;
 		priv->tx_queue[i]->txcoalescing = DEFAULT_TX_COALESCE;
 		priv->tx_queue[i]->txic = DEFAULT_TXIC;
 	}
 
 	for (i = 0; i < priv->num_rx_queues; i++) {
-		priv->rx_queue[i]->rx_ring_size = DEFAULT_RX_RING_SIZE;
 		priv->rx_queue[i]->rxcoalescing = DEFAULT_RX_COALESCE;
 		priv->rx_queue[i]->rxic = DEFAULT_RXIC;
 	}
@@ -1213,6 +1404,38 @@ static int gfar_probe(struct platform_de
 		netdev_info(dev, "TX BD ring size for Q[%d]: %d\n",
 			    i, priv->tx_queue[i]->tx_ring_size);
 
+        // setup a proc directory for debugging info
+        if (gfar_driver_count < GFAR_MAX_DRIVERS)
+        {
+#if 0
+           char dirName[IFNAMESIZE];
+           snprintf(dirName, IFNAMESIZE-1, dev->name, gfar_driver_count);
+#endif
+           gfar_dir[gfar_driver_count] = proc_mkdir(dev->name, NULL);
+           if (NULL == gfar_dir[gfar_driver_count])
+           {
+              printk("Error: failed to create /proc/%s\n", dev->name);
+           }
+           else
+           {
+              // it worked so create the entry
+              gfar_dir_entry[gfar_driver_count] = 
+                 create_proc_read_entry("debug_info", 0444, 
+                                        gfar_dir[gfar_driver_count], 
+                                        gfar_dump_debug, (void *)dev);
+              if (NULL == gfar_dir_entry[gfar_driver_count])
+              {
+                 printk("Error: failed to create /proc/%s/debug_info\n", 
+                        dev->name);
+              }
+           }
+           gfar_driver_count++;
+        }
+        else
+        {
+           printk("Error: could not create a proc entry for %s\n", dev->name);
+        }
+
 	return 0;
 
 register_fail:
@@ -1445,10 +1668,12 @@ static phy_interface_t gfar_get_interfac
 static int init_phy(struct net_device *dev)
 {
 	struct gfar_private *priv = netdev_priv(dev);
+        struct gfar __iomem *regs = priv->gfargrp[0].regs;
 	uint gigabit_support =
 		priv->device_flags & FSL_GIANFAR_DEV_HAS_GIGABIT ?
 		SUPPORTED_1000baseT_Full : 0;
 	phy_interface_t interface;
+        u32 flags = 0;
 
 	priv->oldlink = 0;
 	priv->oldspeed = 0;
@@ -1456,7 +1681,14 @@ static int init_phy(struct net_device *d
 
 	interface = gfar_get_interface(dev);
 
-	priv->phydev = of_phy_connect(dev, priv->phy_node, &adjust_link, 0,
+        /* ProVision hacks:
+         * TODO: move this to dts?
+         */
+        if (interface == PHY_INTERFACE_MODE_RGMII) {
+                flags |= PHY_BCM_FLAGS_RGMII_SGMII_SLAVE;
+        }
+
+        priv->phydev = of_phy_connect(dev, priv->phy_node, &adjust_link, flags,
 				      interface);
 	if (!priv->phydev)
 		priv->phydev = of_phy_connect_fixed_link(dev, &adjust_link,
@@ -1473,6 +1705,20 @@ static int init_phy(struct net_device *d
 	priv->phydev->supported &= (GFAR_SUPPORTED | gigabit_support);
 	priv->phydev->advertising = priv->phydev->supported;
 
+        /* ProVision hacks:
+         * Conduit port needs an special trick ;) 
+         * TODO: move this to ROM code
+         */
+        if (interface == PHY_INTERFACE_MODE_RGMII) {
+                /* TT#0000070480 A defect in the CIPP can cause fifo_full_discard
+                 * errors if we send too many back to back encapsulated messages
+                 * or packets from the master to the slave.  To work around this we
+                 * increase the Back to Back IPG from 96 to 112 bit times to
+                 * give the CIPP more time to process these frames. */
+#define E_TSEC_REG_IPGIFG_DEFAULT             0x40605070
+                gfar_write(&regs->ipgifg, E_TSEC_REG_IPGIFG_DEFAULT);
+        }
+
 	return 0;
 }
 
@@ -1567,6 +1813,7 @@ static void init_registers(struct net_de
 
 	/* Initialize the max receive buffer length */
 	gfar_write(&regs->mrblr, priv->rx_buffer_size);
+        gfar_write(&regs->maxfrm, priv->rx_buffer_size);
 
 	/* Initialize the Minimum Frame Length Register */
 	gfar_write(&regs->minflr, MINFLR_INIT_SETTINGS);
@@ -2113,7 +2360,6 @@ static int gfar_start_xmit(struct sk_buf
 	/* Update transmit stats */
 	tx_queue->stats.tx_bytes += skb->len;
 	tx_queue->stats.tx_packets++;
-
 	txbdp = txbdp_start = tx_queue->cur_tx;
 	lstatus = txbdp->lstatus;
 
@@ -2378,7 +2624,7 @@ static int gfar_change_mtu(struct net_de
 	if (gfar_uses_fcb(priv))
 		frame_size += GMAC_FCB_LEN;
 
-	frame_size += priv->padding;
+        frame_size += priv->padding + priv->extra_padding;
 
 	tempsize = (frame_size & ~(INCREMENTAL_BUFFER_SIZE - 1)) +
 		   INCREMENTAL_BUFFER_SIZE;
--- linux-3.8-orig/drivers/net/ethernet/freescale/gianfar.h	2013-02-18 15:58:34.000000000 -0800
+++ linux-3.8/drivers/net/ethernet/freescale/gianfar.h	2013-04-18 16:13:26.781904766 -0700
@@ -1107,6 +1107,7 @@ struct gfar_private {
 		wol_en:1, /* Wake-on-LAN enabled */
 		prio_sched_en:1; /* Enable priorty based Tx scheduling in Hw */
 	unsigned short padding;
+        unsigned short extra_padding;
 
 	/* PHY stuff */
 	struct phy_device *phydev;
