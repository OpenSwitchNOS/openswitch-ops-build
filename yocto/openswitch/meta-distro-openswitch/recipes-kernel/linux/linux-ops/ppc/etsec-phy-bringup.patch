--- linux-3.8-orig/drivers/net/phy/broadcom.c	2013-02-18 15:58:34.000000000 -0800
+++ linux-3.8/drivers/net/phy/broadcom.c	2013-02-19 13:44:22.171639934 -0800
@@ -123,6 +123,12 @@
 #define BCM5482_SHD_MODE	0x1f	/* 11111: Mode Control Register */
 #define BCM5482_SHD_MODE_1000BX	0x0001	/* Enable 1000BASE-X registers */
 
+/*
+ * BCM51616S: Shadow registers
+ * Shadow values go into bits [14:10] of register 0x1c to select a shadow
+ * register to access.
+ */
+#define BCM54166S_SHD_SGMII_SLAVE	0x15	/* 10101: SGMII Slave Register */
 
 /*
  * EXPANSION SHADOW ACCESS REGISTERS.  (PHY REG 0x15, 0x16, and 0x17)
@@ -418,6 +424,73 @@ static int bcm54xx_config_init(struct ph
 	return 0;
 }
 
+static int bcm54616s_config_init(struct phy_device *phydev)
+{
+	int reg, err;
+
+	/* Turn on the phy unconditionally */
+	reg = phy_read(phydev,MII_BMCR);
+	phy_write(phydev,MII_BMCR, reg & ~BMCR_PDOWN);
+
+	if (phydev->dev_flags & PHY_BCM_FLAGS_RGMII_SGMII_SLAVE) {
+		bcm54xx_shadow_write(phydev, BCM54166S_SHD_SGMII_SLAVE, 0x2);
+	} else {
+		reg = phy_read(phydev, MII_BCM54XX_ECR);
+		if (reg < 0)
+			return reg;
+
+		/* Mask interrupts globally.  */
+		reg |= MII_BCM54XX_ECR_IM;
+		err = phy_write(phydev, MII_BCM54XX_ECR, reg);
+		if (err < 0)
+			return err;
+
+		/* Unmask events we are interested in.  */
+		reg = ~(MII_BCM54XX_INT_DUPLEX |
+			MII_BCM54XX_INT_SPEED |
+			MII_BCM54XX_INT_LINK);
+		err = phy_write(phydev, MII_BCM54XX_IMR, reg);
+		if (err < 0)
+			return err;
+	}
+
+	return 0;
+}
+
+static int bcm54616s_read_status(struct phy_device *phydev)
+{
+	if (phydev->dev_flags & PHY_BCM_FLAGS_RGMII_SGMII_SLAVE) {
+		int val = bcm54xx_shadow_read(phydev, BCM54166S_SHD_SGMII_SLAVE);
+		if (val & 0x100)
+			phydev->link = 1;
+		else
+			phydev->link = 0;
+
+		if ((val & 0xC0) == 0) {
+			phydev->speed = SPEED_10;
+		} else if ((val & 0xC0) == 0x40) {
+			phydev->speed = SPEED_100;
+		} else if ((val & 0xC0) == 0x80) {
+			phydev->speed = SPEED_1000;
+		}
+
+		phydev->duplex = val & 0x100 ? DUPLEX_FULL : DUPLEX_HALF;
+
+		return 0;
+	} else {
+		return genphy_read_status(phydev);
+	}
+}
+
+static int bcm54616s_config_aneg(struct phy_device *phydev)
+{
+	if (phydev->dev_flags & PHY_BCM_FLAGS_RGMII_SGMII_SLAVE) {
+		return 0;
+	}
+
+	return genphy_config_aneg(phydev);
+}
+
 static int bcm5482_config_init(struct phy_device *phydev)
 {
 	int err, reg;
@@ -684,6 +757,19 @@ static int brcm_fet_config_intr(struct p
 
 static struct phy_driver broadcom_drivers[] = {
 {
+	.phy_id		= PHY_ID_BCM54616S,
+	.phy_id_mask	= 0xfffffff0,
+	.name		= "Broadcom BCM54616S",
+	.features	= PHY_GBIT_FEATURES |
+			  SUPPORTED_Pause | SUPPORTED_Asym_Pause,
+	.flags		= PHY_HAS_MAGICANEG | PHY_HAS_INTERRUPT,
+	.config_init	= bcm54616s_config_init,
+	.config_aneg	= bcm54616s_config_aneg,
+	.read_status	= bcm54616s_read_status,
+	.ack_interrupt	= bcm54xx_ack_interrupt,
+	.config_intr	= bcm54xx_config_intr,
+	.driver		= { .owner = THIS_MODULE },
+}, {
 	.phy_id		= PHY_ID_BCM5411,
 	.phy_id_mask	= 0xfffffff0,
 	.name		= "Broadcom BCM5411",
@@ -844,6 +930,7 @@ module_init(broadcom_init);
 module_exit(broadcom_exit);
 
 static struct mdio_device_id __maybe_unused broadcom_tbl[] = {
+	{ PHY_ID_BCM54616S, 0xfffffff0 },
 	{ PHY_ID_BCM5411, 0xfffffff0 },
 	{ PHY_ID_BCM5421, 0xfffffff0 },
 	{ PHY_ID_BCM5461, 0xfffffff0 },
@@ -855,6 +942,7 @@ static struct mdio_device_id __maybe_unu
 	{ PHY_ID_BCM57780, 0xfffffff0 },
 	{ PHY_ID_BCMAC131, 0xfffffff0 },
 	{ PHY_ID_BCM5241, 0xfffffff0 },
+	{ PHY_ID_BCM54616S, 0xfffffff0 },
 	{ }
 };
 
--- linux-3.8-orig/include/linux/brcmphy.h	2013-02-18 15:58:34.000000000 -0800
+++ linux-3.8/include/linux/brcmphy.h	2013-02-19 13:44:22.171639934 -0800
@@ -9,6 +9,7 @@
 #define PHY_ID_BCM5464			0x002060b0
 #define PHY_ID_BCM5461			0x002060c0
 #define PHY_ID_BCM57780			0x03625d90
+#define PHY_ID_BCM54616S		0x03625d10
 
 #define PHY_BCM_OUI_MASK		0xfffffc00
 #define PHY_BCM_OUI_1			0x00206000
@@ -28,4 +29,5 @@
 #define PHY_BRCM_EXT_IBND_TX_ENABLE	0x00002000
 #define PHY_BRCM_CLEAR_RGMII_MODE	0x00004000
 #define PHY_BRCM_DIS_TXCRXC_NOENRGY	0x00008000
+#define PHY_BCM_FLAGS_RGMII_SGMII_SLAVE 0x00010000
 #define PHY_BCM_FLAGS_VALID		0x80000000
