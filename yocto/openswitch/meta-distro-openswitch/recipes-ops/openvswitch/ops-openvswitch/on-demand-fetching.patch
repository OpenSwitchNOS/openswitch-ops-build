diff --git a/lib/ovsdb-idl-provider.h b/lib/ovsdb-idl-provider.h
index dd35e5a..f86f947 100644
--- a/lib/ovsdb-idl-provider.h
+++ b/lib/ovsdb-idl-provider.h
@@ -43,7 +43,10 @@ struct ovsdb_idl_row {
 #endif

     unsigned int change_seqno[OVSDB_IDL_CHANGE_MAX];
+
     struct ovs_list track_node;
+    size_t outstanding_fetch_reqs; /* Number of on-demand columns in this row
+                                       with on-going fetch operations */
 };

 struct ovsdb_idl_column {
@@ -81,6 +84,14 @@ struct ovsdb_idl_table {
 #endif
     unsigned int change_seqno[OVSDB_IDL_CHANGE_MAX];
     struct ovs_list track_list; /* Tracked rows (ovsdb_idl_row.track_node). */
+
+    bool has_pending_fetch;  /* Indicates if the table has a pending fetch
+                                operation */
+    struct shash outstanding_col_fetch_reqs; /* Contains the name of the
+                                                columns with on-demand fetch
+                                                request pending. It does not
+                                                keep anything as data, just
+                                                the column names. */
 };

 struct ovsdb_idl_class {
diff --git a/lib/ovsdb-idl.c b/lib/ovsdb-idl.c
index ccbb449..26999b8 100644
--- a/lib/ovsdb-idl.c
+++ b/lib/ovsdb-idl.c
@@ -76,6 +76,15 @@ struct ovsdb_idl_arc {
     struct ovsdb_idl_row *dst;  /* Destination row. */
 };

+/* Keeps the information of fetch request for on-demand fetch columns. */
+struct ovsdb_idl_fetch_node {
+   struct hmap_node hmap_node;      /* To store this structure in hmaps */
+   struct shash columns;            /* Contains the columns requested */
+   struct ovsdb_idl_table *table;   /* Pointer to the requested table */
+   enum ovsdb_idl_fetch_type fetch_type; /* Type of the request: row, column
+                                            or table */
+};
+
 enum ovsdb_idl_state {
     IDL_S_SCHEMA_REQUESTED,
     IDL_S_MONITOR_REQUESTED,
@@ -104,6 +113,10 @@ struct ovsdb_idl {
     /* Transaction support. */
     struct ovsdb_idl_txn *txn;
     struct hmap outstanding_txns;
+
+    /* On-demand fetch. */
+    struct hmap outstanding_fetch_reqs; /* Contains the data of the
+                                           on-going fetch requests */
 };

 struct ovsdb_idl_txn {
@@ -148,6 +161,13 @@ static bool ovsdb_idl_process_update(struct ovsdb_idl_table *,
                                      const struct uuid *,
                                      const struct json *old,
                                      const struct json *new);
+static void ovsdb_idl_parse_fetch_reply(struct ovsdb_idl *,
+                                        struct hmap_node *,
+                                        const struct json *);
+static struct ovsdb_error *ovsdb_idl_parse_fetch_reply__(
+                                     struct ovsdb_idl *,
+                                     struct ovsdb_idl_fetch_node *,
+                                     const struct json *);
 static void ovsdb_idl_insert_row(struct ovsdb_idl_row *, const struct json *);
 static void ovsdb_idl_delete_row(struct ovsdb_idl_row *);
 static bool ovsdb_idl_modify_row(struct ovsdb_idl_row *, const struct json *);
@@ -181,6 +201,7 @@ static struct ovsdb_idl_table *
 ovsdb_idl_table_from_class(const struct ovsdb_idl *,
                            const struct ovsdb_idl_table_class *);
 static bool ovsdb_idl_track_is_set(struct ovsdb_idl_table *table);
+static struct json *where_uuid_equals(const struct uuid *uuid);

 /* Creates and returns a connection to database 'remote', which should be in a
  * form acceptable to jsonrpc_session_open().  The connection will maintain an
@@ -235,6 +256,7 @@ ovsdb_idl_create(const char *remote, const struct ovsdb_idl_class *class,
         }
         hmap_init(&table->rows);
         list_init(&table->track_list);
+        shash_init(&table->outstanding_col_fetch_reqs);
         table->change_seqno[OVSDB_IDL_CHANGE_INSERT]
             = table->change_seqno[OVSDB_IDL_CHANGE_MODIFY]
             = table->change_seqno[OVSDB_IDL_CHANGE_DELETE] = 0;
@@ -248,6 +270,7 @@ ovsdb_idl_create(const char *remote, const struct ovsdb_idl_class *class,
     idl->request_id = NULL;

     hmap_init(&idl->outstanding_txns);
+    hmap_init(&idl->outstanding_fetch_reqs);

     return idl;
 }
@@ -267,6 +290,7 @@ ovsdb_idl_destroy(struct ovsdb_idl *idl)
             struct ovsdb_idl_table *table = &idl->tables[i];
             shash_destroy(&table->columns);
             hmap_destroy(&table->rows);
+            shash_destroy(&table->outstanding_col_fetch_reqs);
             free(table->modes);
         }
         shash_destroy(&idl->table_by_name);
@@ -275,6 +299,7 @@ ovsdb_idl_destroy(struct ovsdb_idl *idl)
         free(idl->lock_name);
         json_destroy(idl->lock_request_id);
         hmap_destroy(&idl->outstanding_txns);
+        hmap_destroy(&idl->outstanding_fetch_reqs);
         free(idl);
     }
 }
@@ -328,6 +353,7 @@ void
 ovsdb_idl_run(struct ovsdb_idl *idl)
 {
     int i;
+    struct hmap_node *fetch_node;

     ovs_assert(!idl->txn);
     jsonrpc_session_run(idl->session);
@@ -362,7 +388,14 @@ ovsdb_idl_run(struct ovsdb_idl *idl)
             /* Database contents changed. */
             ovsdb_idl_parse_update(idl, msg->params->u.array.elems[1]);
         } else if (msg->type == JSONRPC_REPLY
-                   && idl->request_id
+                   && msg->result->type == JSON_ARRAY
+                   && (fetch_node = hmap_first_with_hash(
+                                        &idl->outstanding_fetch_reqs,
+                                        json_hash(msg->id, 0))) != NULL) {
+            /* On-demand fetch reply received. */
+            ovsdb_idl_parse_fetch_reply(idl, fetch_node, msg->result->u.array.elems[0]);
+        } else if (msg->type == JSONRPC_REPLY
+                  && idl->request_id
                    && json_equal(idl->request_id, msg->id)) {
             switch (idl->state) {
             case IDL_S_SCHEMA_REQUESTED:
@@ -542,6 +575,26 @@ add_ref_table(struct ovsdb_idl *idl, const struct ovsdb_base_type *base)
     }
 }

+/*
+ * Turns on OVSDB_IDL_MANUAL_FETCH for 'column' in 'idl'. Columns in this mode
+ * are not synchronized automatically.
+ *
+ * In order to get its value from the database, it is necessary to explicitly
+ * ask them from the server by calling one of this functions:
+ * ovsdb_idl_fetch_row, ovsdb_idl_fetch_column, or ovsdb_idl_fetch_table.
+ *
+ * This function adds the table with table class 'tc' to the replica (see
+ * ovsdb_idl_add_table() for more information)
+ */
+void
+ovsdb_idl_add_on_demand_column(struct ovsdb_idl *idl,
+                               struct ovsdb_idl_table_class *tc,
+                               const struct ovsdb_idl_column *column)
+{
+    ovsdb_idl_add_table(idl, tc);
+    *ovsdb_idl_get_mode(idl, column) = OVSDB_IDL_ON_DEMAND;
+}
+
 /* Turns on OVSDB_IDL_MONITOR and OVSDB_IDL_ALERT for 'column' in 'idl'.  Also
  * ensures that any tables referenced by 'column' will be replicated, even if
  * no columns in that table are selected for replication (see
@@ -1008,6 +1061,141 @@ ovsdb_idl_parse_update__(struct ovsdb_idl *idl,
     return NULL;
 }

+/* Processes an on-demand fetch request.
+ * 'pending_node' is a pointer to the request associated to the 'fetch_reply'.
+ * This function changes the IDL seqno.
+ */
+static void
+ovsdb_idl_parse_fetch_reply(struct ovsdb_idl *idl,
+                            struct hmap_node *pending_node,
+                            const struct json *fetch_reply)
+{
+
+    struct ovsdb_error *error = NULL;
+    struct ovsdb_idl_fetch_node *fetch_node;
+    /* Retrive the fetch node from the pending fetch hash */
+    fetch_node = CONTAINER_OF(pending_node, struct ovsdb_idl_fetch_node,
+            hmap_node);
+
+    if (fetch_reply->type != JSON_OBJECT) {
+        error = ovsdb_syntax_error(fetch_reply, NULL,
+                "<fetch_reply> is not an object");
+    } else {
+        error = ovsdb_idl_parse_fetch_reply__(idl, fetch_node, fetch_reply);
+    }
+
+    hmap_remove(&idl->outstanding_fetch_reqs, pending_node);
+    shash_destroy(&fetch_node->columns);
+    free(pending_node);
+
+    if (error) {
+        if (!VLOG_DROP_WARN(&syntax_rl)) {
+            char *s = ovsdb_error_to_string(error);
+            VLOG_WARN_RL(&syntax_rl, "%s", s);
+            free(s);
+        }
+        ovsdb_error_destroy(error);
+        return;
+    }
+
+    idl->change_seqno++;
+}
+
+/* Parses the JSON reply and updates the local replica.
+ * It clears the pending fetch flag of the row, column, or table fetched.
+ */
+static struct ovsdb_error *
+ovsdb_idl_parse_fetch_reply__(struct ovsdb_idl *idl,
+                              struct ovsdb_idl_fetch_node *fetch_node,
+                              const struct json* fetch_reply)
+{
+    struct uuid uuid;
+    const struct json_array *array;
+    const struct json *uuid_array;
+    const struct json *column_value;
+    struct ovsdb_datum column_data;
+    struct ovsdb_idl_row *row;
+    struct ovsdb_idl_column *column = NULL;
+    struct shash_node *shash_node;
+    struct ovsdb_idl_table *table = fetch_node->table;
+    unsigned int column_idx;
+    struct ovsdb_datum *old;
+
+    if (fetch_reply->type != JSON_OBJECT) {
+        return ovsdb_syntax_error(fetch_reply, NULL,
+               "<fetch_reply> is not an object");
+    }
+
+    /* Parse the json reply and get the UUID and value of the fetched column */
+    array = json_array(shash_find_data(json_object(fetch_reply), "rows"));
+
+    struct json_array *rows_array = json_array(shash_find_data(json_object(fetch_reply), "rows"));
+    for (int i = 0; i < rows_array->n; ++i) {
+        /* Read the uuid of the fetched row */
+        uuid_array = shash_find_data(json_object(rows_array->elems[i]), "_uuid");
+        if (!uuid_array || uuid_array->type != JSON_ARRAY) {
+            return ovsdb_syntax_error(fetch_reply, NULL,
+                    "Fetch reply for table %s does not include "
+                    "the UUID of the row", table->class->name);
+        }
+
+        array = json_array(uuid_array);
+        if (array->n != 2 || array->elems[1]->type != JSON_STRING
+                || !uuid_from_string(&uuid, array->elems[1]->u.string)) {
+            return ovsdb_syntax_error(fetch_reply, NULL,
+                    "Fetch reply for table %s contains bad UUID", table->class->name);
+        }
+
+        row = CONST_CAST(struct ovsdb_idl_row *,
+                ovsdb_idl_get_row_for_uuid(idl, fetch_node->table->class,
+                    &uuid));
+
+        SHASH_FOR_EACH(shash_node, &fetch_node->columns) {
+            column = shash_node->data;
+            /* Read the fetched value */
+            column_value = shash_find_data(json_object(rows_array->elems[i]),
+                    column->name);
+            if (!column_value) {
+                return ovsdb_syntax_error(fetch_reply, NULL,
+                        "Fetch reply for table %s does not include "
+                        "the requested table value", table->class->name);
+            }
+
+            if (ovsdb_datum_from_json(&column_data, &column->type,
+                        column_value, NULL) != NULL) {
+                return ovsdb_syntax_error(fetch_reply, NULL,
+                        "Fetch reply for column %s contains bad column value",
+                        column->name);
+            }
+
+            /* Update the row */
+            column_idx = column - table->class->columns;
+            old = &row->old[column_idx];
+
+            if (!ovsdb_datum_equals(old, &column_data, &column->type)) {
+                column->parse(row, &column_data);
+                ovsdb_datum_swap(old, &column_data);
+            }
+
+            ovsdb_datum_destroy(&column_data, &column->type);
+            if (fetch_node->fetch_type == OVSDB_IDL_ROW_FETCH) {
+                row->outstanding_fetch_reqs--;
+            }
+        }
+    }
+
+    if (fetch_node->fetch_type == OVSDB_IDL_COLUMN_FETCH && column) {
+        shash_find_and_delete(&table->outstanding_col_fetch_reqs, column->name);
+    }
+
+
+    if (fetch_node->fetch_type == OVSDB_IDL_TABLE_FETCH && table) {
+        table->has_pending_fetch = false;
+    }
+
+    return NULL;
+}
+
 static struct ovsdb_idl_row *
 ovsdb_idl_get_row(struct ovsdb_idl_table *table, const struct uuid *uuid)
 {
@@ -1296,6 +1484,7 @@ ovsdb_idl_row_create__(const struct ovsdb_idl_table_class *class)
     list_init(&row->dst_arcs);
     hmap_node_nullify(&row->txn_node);
     list_init(&row->track_node);
+    row->outstanding_fetch_reqs = 0;
     return row;
 }

@@ -1591,6 +1780,271 @@ ovsdb_idl_get(const struct ovsdb_idl_row *row,
     return ovsdb_idl_read(row, column);
 }

+/* Return true if any column of 'row' has a pending fetch operation.
+ *
+ * This function only considers on-demand requests done explicitly over 'row'
+ * i.e. after calling ovsdb_idl_fetch_row().
+ */
+bool
+ovsdb_idl_is_row_fetch_pending(const struct ovsdb_idl_row *row)
+{
+    return row->outstanding_fetch_reqs > 0;
+}
+
+/* Return true if 'column' has a pending fetch operation
+ *
+ * This function only considers on-demand requests done explicitly over
+ * 'column' i.e. after calling ovsdb_idl_fetch_column().
+ *
+ * It does not take into account rows requests.
+ */
+bool
+ovsdb_idl_is_column_fetch_pending(struct ovsdb_idl *idl,
+                                  const struct ovsdb_idl_table_class *tc,
+                                  const struct ovsdb_idl_column *column) {
+    struct shash_node *shash_node;
+    struct ovsdb_idl_table *table;
+    shash_node = shash_find(&idl->table_by_name, tc->name);
+    table = shash_node->data;
+
+    return shash_find(&table->outstanding_col_fetch_reqs,
+                      column->name) != NULL;
+}
+
+/* Return true if 'table' has a pending fetch operation.
+ *
+ * This function only considers on-demand requests done explicitly over 'table'
+ * i.e. after calling ovsdb_idl_fetch_table().
+ *
+ * It does not take into account columns nor rows requests.
+ */
+bool
+ovsdb_idl_is_table_fetch_pending(struct ovsdb_idl *idl,
+                                 const struct ovsdb_idl_table_class *tc) {
+    struct shash_node *shash_node;
+    struct ovsdb_idl_table *table;
+    shash_node = shash_find(&idl->table_by_name, tc->name);
+    table = shash_node->data;
+
+    return table->has_pending_fetch;
+}
+
+/* This function fetches the value of 'column' for the especified 'row'.
+ *
+ * After calling this function, the IDL requests the required value to the
+ * ovsdb server and updates it in the local replica.
+ *
+ * The function ovsdb_idl_is_row_fetch_pending can be used to verify if the
+ * fetch request has been processed.
+ */
+void
+ovsdb_idl_fetch_row(struct ovsdb_idl *idl,
+                    struct ovsdb_idl_row *row,
+                    const struct ovsdb_idl_column *column)
+{
+    struct json *request;
+    struct json *op;
+    struct json *columns;
+    struct json *fetch_id;
+    int status;
+    struct ovsdb_idl_fetch_node *fetch_node;
+
+    if (!(row->table->modes[column - row->table->class->columns] &
+          OVSDB_IDL_ON_DEMAND)) {
+        VLOG_WARN_RL(&syntax_rl,
+                "Error attempting to fetch a monitored column");
+        return;
+    }
+
+    request = json_array_create_1(
+            json_string_create(idl->class->database));
+    op = json_object_create();
+    json_object_put_string(op, "op", "select");
+    json_object_put_string(op, "table", row->table->class->name);
+    json_object_put(op, "where", where_uuid_equals(&row->uuid));
+    columns = json_array_create_2(json_string_create("_uuid"),
+                                  json_string_create(column->name));
+    json_object_put(op, "columns", columns);
+
+    json_array_add(request, op);
+    status = jsonrpc_session_send(idl->session,
+                jsonrpc_create_request("transact", request, &fetch_id));
+
+    if (status) {
+        VLOG_WARN_RL(&syntax_rl,
+                "Error while sending row fetch request (%d)", status);
+
+        json_destroy(fetch_id);
+        return;
+    }
+
+    fetch_node = xmalloc(sizeof *fetch_node);
+    shash_init(&fetch_node->columns);
+    shash_add_assert(&fetch_node->columns, column->name,
+                     CONST_CAST(struct ovsdb_idl_column *, column));
+
+    fetch_node->table = row->table;
+    fetch_node->fetch_type = OVSDB_IDL_ROW_FETCH;
+
+    hmap_insert(&idl->outstanding_fetch_reqs, &fetch_node->hmap_node,
+                json_hash(fetch_id, 0));
+
+    json_destroy(fetch_id);
+    row->outstanding_fetch_reqs++;
+}
+
+/* This function fetches the value 'column' for all the rows in the table.
+ *
+ * After calling this function, the IDL requests the required values to the
+ * ovsdb server and updates it in the local replica.
+ *
+ * The function ovsdb_idl_is_column_fetch_pending can be used to verify if the
+ * fetch request has been processed.
+ */
+void
+ovsdb_idl_fetch_column(struct ovsdb_idl *idl,
+                       const struct ovsdb_idl_table_class *table_class,
+                       struct ovsdb_idl_column *column)
+{
+    struct json *request;
+    struct json *op;
+    struct json *columns;
+    struct json *fetch_id;
+    int status;
+    struct ovsdb_idl_fetch_node *fetch_node;
+    struct ovsdb_idl_table *table;
+    struct shash_node *shash_node;
+
+    shash_node = shash_find(&idl->table_by_name, table_class->name);
+
+    if (!shash_node) {
+        VLOG_WARN_RL(&syntax_rl, "error attempting to fetch an unknown table");
+        return;
+    }
+
+    table = shash_node->data;
+
+    if (!(table->modes[column - table_class->columns] &
+          OVSDB_IDL_ON_DEMAND)) {
+        VLOG_WARN_RL(&syntax_rl,
+                "error attempting to fetch a monitored column");
+        return;
+    }
+
+    request = json_array_create_1(
+            json_string_create(idl->class->database));
+    op = json_object_create();
+    json_object_put_string(op, "op", "select");
+    json_object_put_string(op, "table", table_class->name);
+    json_object_put(op, "where", json_array_create_empty());
+    columns = json_array_create_2(json_string_create("_uuid"),
+                                  json_string_create(column->name));
+    json_object_put(op, "columns", columns);
+
+    json_array_add(request, op);
+    status = jsonrpc_session_send(idl->session,
+                jsonrpc_create_request("transact", request, &fetch_id));
+
+    if (status) {
+        VLOG_WARN_RL(&syntax_rl,
+                "Error while sending column fetch request (%d)", status);
+
+        json_destroy(fetch_id);
+        return;
+    }
+
+    fetch_node = xmalloc(sizeof *fetch_node);
+    shash_init(&fetch_node->columns);
+    shash_add_assert(&fetch_node->columns, column->name,
+                     CONST_CAST(struct ovsdb_idl_column *, column));
+    fetch_node->table = table;
+    fetch_node->fetch_type = OVSDB_IDL_COLUMN_FETCH;
+
+    hmap_insert(&idl->outstanding_fetch_reqs, &fetch_node->hmap_node,
+                json_hash(fetch_id, 0));
+
+    json_destroy(fetch_id);
+    shash_add(&table->outstanding_col_fetch_reqs, column->name, NULL);
+}
+
+/* This function fetches the value of all the on-demand columns in 'table'
+ *
+ * After calling this function, the IDL requests the required values to the
+ * ovsdb server and updates it in the local replica.
+ *
+ * The function ovsdb_idl_is_table_fetch_pending can be used to verify if the
+ * fetch request has been processed.
+ */
+void
+ovsdb_idl_fetch_table(struct ovsdb_idl *idl,
+                      struct ovsdb_idl_table_class *table_class)
+{
+    struct json *request;
+    struct json *op;
+    struct json *columns;
+    struct json *fetch_id;
+    int status;
+    struct ovsdb_idl_column *column;
+    struct ovsdb_idl_fetch_node *fetch_node;
+    struct ovsdb_idl_table *table;
+    struct shash_node *shash_node;
+
+    shash_node = shash_find(&idl->table_by_name, table_class->name);
+
+    if (!shash_node) {
+        VLOG_WARN_RL(&syntax_rl, "error attempting to fetch an unknown table");
+        return;
+    }
+
+    table = shash_node->data;
+
+    /* Create the fetch node and store the columns*/
+    fetch_node = xmalloc(sizeof *fetch_node);
+    shash_init(&fetch_node->columns);
+    fetch_node->table = table;
+    fetch_node->fetch_type = OVSDB_IDL_TABLE_FETCH;
+
+
+    request = json_array_create_1(json_string_create(idl->class->database));
+
+    op = json_object_create();
+    json_object_put_string(op, "op", "select");
+    json_object_put_string(op, "table", table->class->name);
+    json_object_put(op, "where", json_array_create_empty());
+
+    columns = json_array_create_1(json_string_create("_uuid"));
+
+    /* Add the on-demand columns to the request */
+    SHASH_FOR_EACH(shash_node, &table->columns) {
+        column = (struct ovsdb_idl_column*)shash_node->data;
+        if ((table->modes[column - table->class->columns] &
+                    OVSDB_IDL_ON_DEMAND)) {
+            json_array_add(columns, json_string_create(column->name));
+            shash_add(&fetch_node->columns, column->name, column);
+        }
+    }
+
+    json_object_put(op, "columns", columns);
+
+    json_array_add(request, op);
+    status = jsonrpc_session_send(idl->session,
+                 jsonrpc_create_request("transact", request, &fetch_id));
+
+    if (status) {
+        VLOG_WARN_RL(&syntax_rl,
+                     "Error while sending column fetch request (%d)", status);
+        json_destroy(fetch_id);
+        return;
+    }
+
+    hmap_insert(&idl->outstanding_fetch_reqs, &fetch_node->hmap_node,
+                json_hash(fetch_id, 0));
+
+    json_destroy(fetch_id);
+    table->has_pending_fetch = true;
+}
+
+
 /* Returns true if the field represented by 'column' in 'row' may be modified,
  * false if it is immutable.
  *
@@ -2296,8 +2750,9 @@ ovsdb_idl_txn_write__(const struct ovsdb_idl_row *row_,

     ovs_assert(row->new != NULL);
     ovs_assert(column_idx < class->n_columns);
-    ovs_assert(row->old == NULL ||
-               row->table->modes[column_idx] & OVSDB_IDL_MONITOR);
+    ovs_assert(row->old == NULL
+               || row->table->modes[column_idx] & OVSDB_IDL_MONITOR
+               || row->table->modes[column_idx] & OVSDB_IDL_ON_DEMAND);

     if (row->table->idl->verify_write_only && !write_only) {
         VLOG_ERR("Bug: Attempt to write to a read/write column (%s:%s) when"
diff --git a/lib/ovsdb-idl.h b/lib/ovsdb-idl.h
index 4c66ae0..7305486 100644
--- a/lib/ovsdb-idl.h
+++ b/lib/ovsdb-idl.h
@@ -44,6 +44,7 @@ struct ovsdb_datum;
 struct ovsdb_idl_class;
 struct ovsdb_idl_row;
 struct ovsdb_idl_column;
+struct ovsdb_idl_table;
 struct ovsdb_idl_table_class;
 struct uuid;

@@ -102,8 +103,22 @@ int ovsdb_idl_get_last_error(const struct ovsdb_idl *);
 #define OVSDB_IDL_MONITOR (1 << 0) /* Monitor this column? */
 #define OVSDB_IDL_ALERT   (1 << 1) /* Alert client when column updated? */
 #define OVSDB_IDL_TRACK   (1 << 2)
+#define OVSDB_IDL_ON_DEMAND (1 << 3) /* Manually update columns */
+
+/* On-demand fetch columns.
+ * Fetch request types.
+ */
+enum ovsdb_idl_fetch_type {
+    OVSDB_IDL_ROW_FETCH,    /* Fetch a column value for a given row. */
+    OVSDB_IDL_COLUMN_FETCH, /* Fetch the value of a whole column. */
+    OVSDB_IDL_TABLE_FETCH   /* Fetch the value of all on-demand
+                               columns that are part of given table. */
+};

 void ovsdb_idl_add_column(struct ovsdb_idl *, const struct ovsdb_idl_column *);
+void ovsdb_idl_add_on_demand_column(struct ovsdb_idl *,
+                                    struct ovsdb_idl_table_class *,
+                                    const struct ovsdb_idl_column *);
 void ovsdb_idl_add_table(struct ovsdb_idl *,
                          const struct ovsdb_idl_table_class *);

@@ -150,6 +165,22 @@ const struct ovsdb_datum *ovsdb_idl_get(const struct ovsdb_idl_row *,
                                         const struct ovsdb_idl_column *,
                                         enum ovsdb_atomic_type key_type,
                                         enum ovsdb_atomic_type value_type);
+void ovsdb_idl_fetch_row(struct ovsdb_idl *,
+                         struct ovsdb_idl_row *,
+                         const struct ovsdb_idl_column *);
+void ovsdb_idl_fetch_column(struct ovsdb_idl *,
+                            const struct ovsdb_idl_table_class *,
+                            struct ovsdb_idl_column *);
+void ovsdb_idl_fetch_table(struct ovsdb_idl *,
+                           struct ovsdb_idl_table_class *);
+
+bool ovsdb_idl_is_row_fetch_pending(const struct ovsdb_idl_row *);
+bool ovsdb_idl_is_column_fetch_pending(struct ovsdb_idl *,
+                                       const struct ovsdb_idl_table_class *,
+                                       const struct ovsdb_idl_column *);
+bool ovsdb_idl_is_table_fetch_pending(struct ovsdb_idl *,
+                                      const struct ovsdb_idl_table_class *);
+
 bool ovsdb_idl_is_mutable(const struct ovsdb_idl_row *,
                           const struct ovsdb_idl_column *);

diff --git a/ovsdb/ovsdb-idlc.in b/ovsdb/ovsdb-idlc.in
index 6f52c40..4ee3954 100755
--- a/ovsdb/ovsdb-idlc.in
+++ b/ovsdb/ovsdb-idlc.in
@@ -255,6 +255,22 @@ struct %(s)s *%(s)s_insert(struct ovsdb_idl_txn *);
                                                structName.upper(), func)
             print

+        # On-demand fetching functions
+        print 'bool %(s)s_is_row_fetch_pending(const struct %(s)s *);\n' % {'s': structName}
+        for columnName, column in sorted(table.columns.iteritems()):
+            print 'bool %(s)s_is_%(c)s_fetch_pending(struct ovsdb_idl *);' % {'s': structName, 'c': columnName}
+        print '\nbool %(s)s_is_table_fetch_pending(struct ovsdb_idl *);\n' % {'s': structName}
+
+        for columnName, column in sorted(table.columns.iteritems()):
+            print 'void %(s)s_fetch_%(c)s(struct ovsdb_idl *, const struct %(s)s *);' % {'s': structName, 'c': columnName}
+        print
+
+        for columnName, column in sorted(table.columns.iteritems()):
+            print 'void %(s)s_fetch_col_%(c)s(struct ovsdb_idl *);' % {'s': structName, 'c': columnName}
+        print
+
+        print 'void %(s)s_fetch_table(struct ovsdb_idl *);\n' % {'s': structName, 'c': columnName}
+
         for columnName, column in sorted(table.columns.iteritems()):
             print 'void %(s)s_verify_%(c)s(const struct %(s)s *);' % {'s': structName, 'c': columnName}

@@ -617,6 +633,90 @@ struct %(s)s *
         't': tableName,
         'T': tableName.upper()}

+        # On-demand fetching functions.
+        print '''
+/* Verify if there is a pending fetch for 'rec'. */
+bool
+%(s)s_is_row_fetch_pending(const struct %(s)s *rec)
+{
+    ovs_assert(inited);
+    return ovsdb_idl_is_row_fetch_pending(CONST_CAST(struct ovsdb_idl_row *,
+                                                     &rec->header_));
+}''' % {'s': structName }
+
+        for columnName, column in sorted(table.columns.iteritems()):
+            print '''
+/* Verify if there is a pending fetch for '%(c)s' column. */
+bool
+%(s)s_is_%(c)s_fetch_pending(struct ovsdb_idl* idl)
+{
+    ovs_assert(inited);
+    return ovsdb_idl_is_column_fetch_pending(idl,
+                                             &%(p)stable_classes[%(P)sTABLE_%(T)s],
+                                             &%(s)s_col_%(c)s);
+}''' % {'s': structName,
+        'c': columnName,
+        'p': prefix,
+        'P': prefix.upper(),
+        't': tableName,
+        'T': tableName.upper()
+        }
+
+        print '''
+/* Verify if there is a pending fetch for table %(t)s. */
+bool
+%(s)s_is_table_fetch_pending(struct ovsdb_idl *idl)
+{
+    return ovsdb_idl_is_table_fetch_pending(idl, &%(p)stable_classes[%(P)sTABLE_%(T)s]);
+}
+''' % {'s': structName,
+       'p': prefix,
+       'P': prefix.upper(),
+       't': tableName,
+       'T': tableName.upper()}
+
+        for columnName, column in sorted(table.columns.iteritems()):
+            print '''
+/* Requests to fetch %(c)s for the specified 'rec'. */
+void
+%(s)s_fetch_%(c)s(struct ovsdb_idl *idl, const struct %(s)s *rec)
+{
+    ovs_assert(inited);
+    ovsdb_idl_fetch_row(idl,
+                        CONST_CAST(struct ovsdb_idl_row *, &rec->header_),
+                        &%(s)s_col_%(c)s);
+}''' % {'s': structName, 'c': columnName }
+
+
+        for columnName, column in sorted(table.columns.iteritems()):
+            print '''
+/* Requests to fetch the column '%(c)s' */
+void
+%(s)s_fetch_col_%(c)s(struct ovsdb_idl *idl)
+{
+    ovsdb_idl_fetch_column(idl,
+                           &%(p)stable_classes[%(P)sTABLE_%(T)s],
+                           &%(s)s_col_%(c)s);
+}''' % {'s': structName,
+        'c': columnName,
+        'p': prefix,
+        'P': prefix.upper(),
+        'T': tableName.upper()}
+
+        print '''
+/* Requests to fetch all the on-demand columns for the specified 'table'. */
+void
+%(s)s_fetch_table(struct ovsdb_idl *idl)
+{
+    ovs_assert(inited);
+    ovsdb_idl_fetch_table(idl,
+                          &%(p)stable_classes[%(P)sTABLE_%(T)s]);
+}''' % {'s': structName,
+        'p': prefix,
+        'P': prefix.upper(),
+        'T': tableName.upper()}
+        print
+
         # Verify functions.
         for columnName, column in sorted(table.columns.iteritems()):
             print '''
