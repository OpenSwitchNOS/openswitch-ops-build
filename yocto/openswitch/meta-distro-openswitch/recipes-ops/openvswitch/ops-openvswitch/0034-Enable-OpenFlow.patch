From fda948a70a23123294a2dc99cbdca4dff0387940 Mon Sep 17 00:00:00 2001
From: Amitabha Sen <amitabha.sen@broadcom.com>
Date: Wed, 22 Jun 2016 20:40:16 +0530
Subject: [PATCH] Enable OpenFlow

Uncommented code in OVS to enable the OpenFlow agent. The OpenFlow
agent runs in the ops-switchd process. It talks to the remote
OpenFlow Controller and installs OpenFlow forwarding rules in the
ASIC. The ASIC driver for Broadcom silicon is provided by the
changes done in the opennsl-plugin.

Also made changes to switch to the Management namespace while
creating a socket to be able to connect to the OpenFlow
Controller via the service port.

Change-Id: Ibc86f8645a2088bf074d3ab4367e25cbfe2d866c
Signed-off-by: Amitabha Sen <amitabha.sen@broadcom.com>
---
 Makefile.am                    |  4 --
 lib/db-ctl-base.h              |  4 ++
 lib/socket-util.c              | 91 ++++++++++++++++++++++++++++++++++++++++++
 utilities/automake.mk          | 11 +----
 utilities/ovs-ofctl.c          |  4 ++
 utilities/ovs-testcontroller.c |  4 ++
 utilities/ovs-vsctl.c          | 28 ++++---------
 7 files changed, 113 insertions(+), 33 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index 4395840..d85a7c0 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -7,11 +7,7 @@
 
 AUTOMAKE_OPTIONS = foreign subdir-objects
 ACLOCAL_AMFLAGS = -I m4
-if OPS
-SUBDIRS = libltdl
-else
 SUBDIRS = datapath libltdl
-endif
 
 AM_CPPFLAGS = $(SSL_CFLAGS)
 AM_LDFLAGS = $(SSL_LDFLAGS)
diff --git a/lib/db-ctl-base.h b/lib/db-ctl-base.h
index bada320..c916dc2 100644
--- a/lib/db-ctl-base.h
+++ b/lib/db-ctl-base.h
@@ -177,7 +177,11 @@ struct weak_ref_table {
 struct cmd_show_table {
     const struct ovsdb_idl_table_class *table;
     const struct ovsdb_idl_column *name_column;
+#ifdef OPS
+    const struct ovsdb_idl_column *columns[4]; /* Seems like a good number. */
+#else
     const struct ovsdb_idl_column *columns[3]; /* Seems like a good number. */
+#endif
     const struct weak_ref_table wref_table;
 };
 
diff --git a/lib/socket-util.c b/lib/socket-util.c
index d053d37..c9db2a9 100644
--- a/lib/socket-util.c
+++ b/lib/socket-util.c
@@ -46,11 +46,81 @@
 #include "netlink-socket.h"
 #endif
 
+#ifdef OPS
+#define OPS_SWITCH_NAMESPACE   "swns"
+#define OPS_MAX_BUFFER_SIZE    128
+#endif
+
 VLOG_DEFINE_THIS_MODULE(socket_util);
 
 static int getsockopt_int(int fd, int level, int option, const char *optname,
                           int *valuep);
 
+#ifdef OPS
+/***************************************************************************
+ * enters OOBM namespace
+ *
+ * @return 0 if sucessful, else negative value on failure
+ ***************************************************************************/
+static int ops_setns_oobm (void)
+{
+    int fd = -1;
+    char ns_path[OPS_MAX_BUFFER_SIZE] = {0};
+
+    snprintf(ns_path, OPS_MAX_BUFFER_SIZE, "/proc/1/ns/net");
+    fd = open(ns_path, O_RDONLY);
+    if (fd == -1)
+    {
+        VLOG_ERR("Entering mgmt OOBM namespace: errno %d", errno);
+        return -1;
+    }
+
+    if (setns(fd, CLONE_NEWNET) == -1) /* Join that namespace */
+    {
+        VLOG_ERR("Unable to enter the mgmt OOBM namespace, errno %d", errno);
+        close(fd);
+        return -1;
+    }
+    close(fd);
+    return 0;
+}
+
+/***************************************************************************
+ * enters a namespace with the given ns name
+ *
+ * @param[in]  ns_name  : the namespace name corresponding to given namespace.
+ *
+ * @return 0 if sucessful, else negative value on failure
+ ***************************************************************************/
+static int ops_setns_with_name (const char *ns_name)
+{
+     int fd = -1;
+     char ns_path[OPS_MAX_BUFFER_SIZE] = {0};
+
+     strcat(ns_path, "/var/run/netns/");
+     snprintf(ns_path + strlen(ns_path), OPS_MAX_BUFFER_SIZE - strlen(ns_path) - 1,
+                                                                 "%s", ns_name);
+     fd = open(ns_path, O_RDONLY);  /* Get descriptor for namespace */
+     if (fd == -1)
+     {
+         VLOG_ERR("%s: namespace does not exist, errno %d\n", ns_name, errno);
+         return -1;
+     }
+
+     if (setns(fd, CLONE_NEWNET) == -1) /* Join that namespace */
+     {
+         VLOG_ERR("Unable to set namespace %s in the thread, error %d",
+                    ns_name, errno);
+         close(fd);
+         return -1;
+     }
+
+    close(fd);
+    return 0;
+}
+
+#endif
+
 /* Sets 'fd' to non-blocking mode.  Returns 0 if successful, otherwise a
  * positive errno value. */
 int
@@ -459,9 +529,19 @@ inet_open_active(int style, const char *target, uint16_t default_port,
         error = EAFNOSUPPORT;
         goto exit;
     }
+#ifdef OPS
+    /* Switch to Management namespace */
+    ops_setns_oobm ();
+#endif
 
     /* Create non-blocking socket. */
     fd = socket(ss.ss_family, style, 0);
+
+#ifdef OPS
+    /* Switch to Switch namespace */
+    ops_setns_with_name(OPS_SWITCH_NAMESPACE);
+#endif
+
     if (fd < 0) {
         error = sock_errno();
         VLOG_ERR("%s: socket: %s", target, sock_strerror(error));
@@ -587,8 +667,19 @@ inet_open_passive(int style, const char *target, int default_port,
     }
     kernel_chooses_port = ss_get_port(&ss) == 0;
 
+#ifdef OPS
+    /* Switch to Management namespace */
+    ops_setns_oobm ();
+#endif
+
     /* Create non-blocking socket, set SO_REUSEADDR. */
     fd = socket(ss.ss_family, style, 0);
+
+#ifdef OPS
+    /* Switch to Switch namespace */
+    ops_setns_with_name(OPS_SWITCH_NAMESPACE);
+#endif
+
     if (fd < 0) {
         error = sock_errno();
         VLOG_ERR("%s: socket: %s", target, sock_strerror(error));
diff --git a/utilities/automake.mk b/utilities/automake.mk
index 80b4255..bfafb93 100644
--- a/utilities/automake.mk
+++ b/utilities/automake.mk
@@ -1,15 +1,10 @@
-if OPS
-bin_PROGRAMS += \
-	utilities/ovs-appctl \
-	utilities/ovs-vsctl
-else
 bin_PROGRAMS += \
 	utilities/ovs-appctl \
 	utilities/ovs-testcontroller \
 	utilities/ovs-dpctl \
 	utilities/ovs-ofctl \
 	utilities/ovs-vsctl
-endif
+
 bin_SCRIPTS += utilities/ovs-docker \
 	utilities/ovs-pki
 if HAVE_PYTHON
@@ -131,7 +126,6 @@ man_MANS += \
 utilities_ovs_appctl_SOURCES = utilities/ovs-appctl.c
 utilities_ovs_appctl_LDADD = lib/libovscommon.la ovsdb/libovsdb.la
 
-if !OPS
 utilities_ovs_testcontroller_SOURCES = utilities/ovs-testcontroller.c
 utilities_ovs_testcontroller_LDADD = lib/libovscommon.la ovsdb/libovsdb.la lib/libopenvswitch.la $(SSL_LIBS)
 
@@ -144,10 +138,9 @@ utilities_ovs_ofctl_LDADD = \
 	lib/libovscommon.la \
 	ovsdb/libovsdb.la \
 	lib/libopenvswitch.la
-endif
 
 utilities_ovs_vsctl_SOURCES = utilities/ovs-vsctl.c
-utilities_ovs_vsctl_LDADD = lib/libovscommon.la ovsdb/libovsdb.la
+utilities_ovs_vsctl_LDADD = lib/libovscommon.la ovsdb/libovsdb.la lib/libopenvswitch.la
 
 if LINUX
 sbin_PROGRAMS += utilities/ovs-vlan-bug-workaround
diff --git a/utilities/ovs-ofctl.c b/utilities/ovs-ofctl.c
index 0d57f85..bdc3264 100644
--- a/utilities/ovs-ofctl.c
+++ b/utilities/ovs-ofctl.c
@@ -1616,7 +1616,11 @@ monitor_vconn(struct vconn *vconn, bool reply_to_echo_requests)
     int error;
 
     daemon_save_fd(STDERR_FILENO);
+#ifdef OPS
+    daemonize_start();
+#else
     daemonize_start(false);
+#endif
     error = unixctl_server_create(unixctl_path, &server);
     if (error) {
         ovs_fatal(error, "failed to create unixctl server");
diff --git a/utilities/ovs-testcontroller.c b/utilities/ovs-testcontroller.c
index 60cc32f..b4ae357 100644
--- a/utilities/ovs-testcontroller.c
+++ b/utilities/ovs-testcontroller.c
@@ -147,7 +147,11 @@ main(int argc, char *argv[])
         ovs_fatal(0, "no active or passive switch connections");
     }
 
+#ifdef OPS
+    daemonize_start();
+#else
     daemonize_start(false);
+#endif
 
     retval = unixctl_server_create(unixctl_path, &unixctl);
     if (retval) {
diff --git a/utilities/ovs-vsctl.c b/utilities/ovs-vsctl.c
index d404b8f..5b70cd5 100644
--- a/utilities/ovs-vsctl.c
+++ b/utilities/ovs-vsctl.c
@@ -835,10 +835,8 @@ pre_get_info(struct ctl_context *ctx)
     ovsdb_idl_add_column(ctx->idl, &ovsrec_open_vswitch_col_bridges);
 
     ovsdb_idl_add_column(ctx->idl, &ovsrec_bridge_col_name);
-#ifndef OPS_TEMP
     ovsdb_idl_add_column(ctx->idl, &ovsrec_bridge_col_controller);
     ovsdb_idl_add_column(ctx->idl, &ovsrec_bridge_col_fail_mode);
-#endif
     ovsdb_idl_add_column(ctx->idl, &ovsrec_bridge_col_ports);
 
     ovsdb_idl_add_column(ctx->idl, &ovsrec_port_col_name);
@@ -849,9 +847,7 @@ pre_get_info(struct ctl_context *ctx)
     ovsdb_idl_add_column(ctx->idl, &ovsrec_port_col_interfaces);
 
     ovsdb_idl_add_column(ctx->idl, &ovsrec_interface_col_name);
-#ifndef OPS_TEMP
     ovsdb_idl_add_column(ctx->idl, &ovsrec_interface_col_ofport);
-#endif
 #ifdef OPS
     /* FIXME: We currently use presence of subsystems as an indicator
      * that this is a physical switch instead of a virtual switch.  This
@@ -1151,7 +1147,6 @@ find_bridge(struct vsctl_context *vsctl_ctx, const char *name, bool must_exist)
     return br;
 }
 
-#ifndef OPS_TEMP
 static struct vsctl_bridge *
 find_real_bridge(struct vsctl_context *vsctl_ctx,
                  const char *name, bool must_exist)
@@ -1162,7 +1157,7 @@ find_real_bridge(struct vsctl_context *vsctl_ctx,
     }
     return br;
 }
-#endif
+
 static struct vsctl_port *
 find_port(struct vsctl_context *vsctl_ctx, const char *name, bool must_exist)
 {
@@ -1287,10 +1282,9 @@ static struct cmd_show_table cmd_show_tables[] = {
     {&ovsrec_table_bridge,
      &ovsrec_bridge_col_name,
      {
-#ifndef OPS_TEMP
       &ovsrec_bridge_col_controller,
       &ovsrec_bridge_col_fail_mode,
-#else
+#ifdef OPS_TEMP
       &ovsrec_bridge_col_vlans,
 #endif
       &ovsrec_bridge_col_ports},
@@ -1330,7 +1324,6 @@ static struct cmd_show_table cmd_show_tables[] = {
      {NULL, NULL, NULL}
     },
 
-#ifndef OPS_TEMP
     {&ovsrec_table_controller,
      &ovsrec_controller_col_target,
      {&ovsrec_controller_col_is_connected,
@@ -1338,7 +1331,6 @@ static struct cmd_show_table cmd_show_tables[] = {
       NULL},
      {NULL, NULL, NULL}
     },
-#endif
 #ifdef OPS
     {&ovsrec_table_subsystem,
      &ovsrec_subsystem_col_name,
@@ -1482,9 +1474,9 @@ pre_cmd_emer_reset(struct ctl_context *ctx)
     ovsdb_idl_add_column(ctx->idl, &ovsrec_open_vswitch_col_manager_options);
     ovsdb_idl_add_column(ctx->idl, &ovsrec_open_vswitch_col_ssl);
 
-#ifndef OPS_TEMP
     ovsdb_idl_add_column(ctx->idl, &ovsrec_bridge_col_controller);
     ovsdb_idl_add_column(ctx->idl, &ovsrec_bridge_col_fail_mode);
+#ifndef OPS_TEMP
     ovsdb_idl_add_column(ctx->idl, &ovsrec_bridge_col_mirrors);
     ovsdb_idl_add_column(ctx->idl, &ovsrec_bridge_col_netflow);
     ovsdb_idl_add_column(ctx->idl, &ovsrec_bridge_col_sflow);
@@ -1513,8 +1505,8 @@ cmd_emer_reset(struct ctl_context *ctx)
 #ifndef OPS_TEMP
     const struct ovsrec_interface *iface;
     const struct ovsrec_mirror *mirror, *next_mirror;
-    const struct ovsrec_controller *ctrl, *next_ctrl;
 #endif
+    const struct ovsrec_controller *ctrl, *next_ctrl;
     const struct ovsrec_manager *mgr, *next_mgr;
 #ifndef OPS_TEMP
     const struct ovsrec_netflow *nf, *next_nf;
@@ -1532,9 +1524,9 @@ cmd_emer_reset(struct ctl_context *ctx)
     OVSREC_BRIDGE_FOR_EACH (br, idl) {
         const char *hwaddr;
 
-#ifndef OPS_TEMP
         ovsrec_bridge_set_controller(br, NULL, 0);
         ovsrec_bridge_set_fail_mode(br, NULL);
+#ifndef OPS_TEMP
         ovsrec_bridge_set_mirrors(br, NULL, 0);
         ovsrec_bridge_set_netflow(br, NULL);
         ovsrec_bridge_set_sflow(br, NULL);
@@ -1567,11 +1559,11 @@ cmd_emer_reset(struct ctl_context *ctx)
     OVSREC_MIRROR_FOR_EACH_SAFE (mirror, next_mirror, idl) {
         ovsrec_mirror_delete(mirror);
     }
+#endif
 
     OVSREC_CONTROLLER_FOR_EACH_SAFE (ctrl, next_ctrl, idl) {
         ovsrec_controller_delete(ctrl);
     }
-#endif
     OVSREC_MANAGER_FOR_EACH_SAFE (mgr, next_mgr, idl) {
         ovsrec_manager_delete(mgr);
     }
@@ -2867,7 +2859,6 @@ cmd_iface_to_br(struct ctl_context *ctx)
     ds_put_format(&ctx->output, "%s\n", iface->port->bridge->name);
 }
 
-#ifndef OPS_TEMP
 static void
 verify_controllers(struct ovsrec_bridge *bridge)
 {
@@ -3034,7 +3025,7 @@ cmd_set_fail_mode(struct ctl_context *ctx)
 
     ovsrec_bridge_set_fail_mode(br->br_cfg, fail_mode);
 }
-#endif
+
 static void
 verify_managers(const struct ovsrec_open_vswitch *ovs)
 {
@@ -3403,12 +3394,10 @@ static const struct ctl_table_class tables[] = {
 #endif
     }},
 
-#ifndef OPS_TEMP
     {&ovsrec_table_controller,
      {{&ovsrec_table_bridge,
        &ovsrec_bridge_col_name,
        &ovsrec_bridge_col_controller}}},
-#endif
 #ifdef OPS
     {&ovsrec_table_subsystem,
      {{&ovsrec_table_subsystem, &ovsrec_subsystem_col_name, NULL},
@@ -3959,7 +3948,6 @@ static const struct ctl_command_syntax vsctl_commands[] = {
     {"iface-to-br", 1, 1, "IFACE", pre_get_info, cmd_iface_to_br, NULL, "",
      RO},
 
-#ifndef OPS_TEMP
     /* Controller commands. */
     {"get-controller", 1, 1, "BRIDGE", pre_controller, cmd_get_controller,
      NULL, "", RO},
@@ -3973,7 +3961,7 @@ static const struct ctl_command_syntax vsctl_commands[] = {
      "", RW},
     {"set-fail-mode", 2, 2, "BRIDGE MODE", pre_get_info, cmd_set_fail_mode,
      NULL, "", RW},
-#endif
+
     /* Manager commands. */
     {"get-manager", 0, 0, "", pre_manager, cmd_get_manager, NULL, "", RO},
     {"del-manager", 0, 0, "", pre_manager, cmd_del_manager, NULL, "", RW},
-- 
2.7.4

