From 22b25f69bf4adc5da1c4667db6827d4f0a4a6106 Mon Sep 17 00:00:00 2001
From: "Marcelo E. Magallon" <marcelo.magallon@hpe.com>
Date: Fri, 13 May 2016 13:32:08 -0600
Subject: [PATCH] Python IDL tracking

Signed-off-by: Marcelo E. Magallon <marcelo.magallon@hpe.com>
---
 python/ovs/db/idl.py | 186 ++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 183 insertions(+), 3 deletions(-)

diff --git a/python/ovs/db/idl.py b/python/ovs/db/idl.py
index b6c986e..764a930 100644
--- a/python/ovs/db/idl.py
+++ b/python/ovs/db/idl.py
@@ -13,6 +13,7 @@
 # limitations under the License.
 
 import uuid
+import collections
 
 import ovs.jsonrpc
 import ovs.db.parser
@@ -406,7 +407,19 @@ class Idl(object):
         if not new:
             # Delete row.
             if row:
-                del table.rows[uuid]
+                # tracking
+                if hasattr(self._db.tables[table.name], 'track_list'):
+                    _deleted = table.rows.pop(uuid)
+                    seqno = self.change_seqno + 1
+                    if _deleted.uuid in self._db.tables[table.name].track_list:
+                        self._db.tables[table.name].track_list[
+                            _deleted.uuid].delete_seqno = seqno
+                    else:
+                        self._db.tables[table.name].track_list[
+                            _deleted.uuid] = TrackInfo(delete_seqno=seqno)
+                else:
+                    del table.rows[uuid]
+
                 changed = True
                 self.notify(ROW_DELETE, row)
             else:
@@ -418,6 +431,13 @@ class Idl(object):
             if not row:
                 row = self.__create_row(table, uuid)
                 changed = True
+
+                # tracking
+                if hasattr(self._db.tables[table.name], 'track_list'):
+                    seqno = self.change_seqno + 1
+                    self._db.tables[table.name].track_list[
+                        row.uuid] = TrackInfo(create_seqno=seqno)
+
             else:
                 # XXX rate-limit
                 vlog.warn("cannot add existing row %s to table %s"
@@ -439,8 +459,12 @@ class Idl(object):
                 self.notify(op, row, Row.from_json(self, table, uuid, old))
         return changed
 
+
     def __row_update(self, table, row, row_json):
         changed = False
+
+        # tracking
+        tracked_columns = []
         for column_name, datum_json in row_json.iteritems():
             column = table.columns.get(column_name)
             if not column:
@@ -451,7 +475,7 @@ class Idl(object):
 
             try:
                 datum = ovs.db.data.Datum.from_json(column.type, datum_json)
-            except error.Error, e:
+            except error.Error as e:
                 # XXX rate-limit
                 vlog.warn("error parsing column %s in table %s: %s"
                           % (column_name, table.name, e))
@@ -459,12 +483,29 @@ class Idl(object):
 
             if datum != row._data[column_name]:
                 row._data[column_name] = datum
+
+                # tracking
+                if hasattr(column, 'track'):
+                    tracked_columns.append(column_name)
+
                 if column.alert:
                     changed = True
             else:
                 # Didn't really change but the OVSDB monitor protocol always
                 # includes every value in a row.
                 pass
+
+        # tracking
+        if tracked_columns:
+            seqno = self.change_seqno + 1
+            if row.uuid in table.track_list:
+                table.track_list[row.uuid].columns =\
+                    table.track_list[row.uuid].columns | set(tracked_columns)
+                table.track_list[row.uuid].update_seqno = seqno
+            else:
+                table.track_list[row.uuid] =\
+                    TrackInfo(tracked_columns, update_seqno=seqno)
+
         return changed
 
     def __create_row(self, table, uuid):
@@ -487,6 +528,108 @@ class Idl(object):
         if txn:
             txn._process_reply(msg)
 
+    def track_add_column(self, table, column):
+        """
+        Enable tracking for 'column' in 'table'
+        """
+        if table not in self._db.tables:
+            raise error.Error("table %s is not registered with idl" % table)
+
+        if column not in self._db.tables[table].columns:
+            raise error.Error("column %s in table %s" +
+                              "is not registered with idl" % (table, column))
+
+        # set column track
+        self._db.tables[table].columns[column].track = True
+
+        # set table track list
+        if not hasattr(self._db.tables[table], 'track_list'):
+            self._db.tables[table].track_list = TrackList()
+
+    def track_remove_column(self, table, column):
+        """
+        Disable tracking for 'column' in 'table'
+        """
+        if table not in self._db.tables:
+            raise error.Error("table %s is not registered with idl" % table)
+
+        if column not in self._db.tables[table].columns:
+            raise error.Error("column %s in table %s is" +
+                              "not registered with idl" % (table, column))
+
+        if hasattr(self._db.tables[table].columns[column], 'track'):
+            del self._db.tables[table].columns[column].track
+
+        if hasattr(self._db.tables[table], 'track_list'):
+            del self._db.tables[table].track_list
+
+    def track_add_all_columns(self, table):
+        """
+        Enable tracking for all registered 'columns' in 'table'
+        """
+        if table not in self._db.tables:
+            raise error.Error("table %s is not registered with idl" % table)
+
+        for columnschema in self._db.tables[table].columns.itervalues():
+            columnschema.track = True
+
+        self._db.tables[table].track_list = TrackList()
+
+    def track_remove_all_columns(self, table):
+        """
+        Disable tracking for all registered 'columns' in 'table'
+        """
+        if table not in self._db.tables:
+            raise error.Error("table %s is not registered with idl" % table)
+
+        for columnschema in self._db.tables[table].columns.itervalues():
+            if hasattr(columnschema, 'track'):
+                del columnschema.track
+
+        if hasattr(self._db.tables[table], 'track_list'):
+            del self._db.tables[table].track_list
+
+    def track_clear_table(self, table):
+        """
+        Clear all tracking data for 'table'
+        """
+        if table not in self._db.tables:
+            raise error.Error("table %s is not registered with idl" % table)
+
+        if hasattr(self._db.tables[table], 'track_list'):
+            self._db.tables[table].track_list.clear()
+
+    def track_add_all(self):
+        """
+        Enable tracking for all registered 'columns'
+        for all registered 'tables'
+        """
+        for tableschema in self._db.tables.itervalues():
+            for columnschema in tableschema.columns.itervalues():
+                columnschema.track = True
+            tableschema.track_list = TrackList()
+
+    def track_clear_all(self):
+        """
+        Clear all tracking data for all registered 'tables'
+        """
+        for tableschema in self._db.tables.itervalues():
+            if hasattr(tableschema, 'track_list'):
+                tableschema.track_list.clear()
+
+    def track_get(self, table):
+        """
+        Get tracking data for 'table'
+        """
+        if table not in self._db.tables:
+            raise error.Error("table %s is not registered with idl" % table)
+
+        if not hasattr(self._db.tables[table], 'track_list'):
+            raise error.Error("table %s is not being " +
+                              "tracked for changes" % table)
+
+        return self._db.tables[table].track_list
+
 
 def _uuid_to_row(atom, base):
     if base.ref_table:
@@ -1401,6 +1544,43 @@ class SchemaHelper(object):
             assert column_name in table.columns
 
             new_columns[column_name] = table.columns[column_name]
-
         table.columns = new_columns
         return table
+
+
+class TrackInfo(object):
+    def __init__(self, columns=[], create_seqno=0,
+                 delete_seqno=0, update_seqno=0):
+        self.columns = set(columns)
+        self.create_seqno = create_seqno
+        self.delete_seqno = delete_seqno
+        self.update_seqno = update_seqno
+
+
+class TrackList(collections.MutableMapping):
+
+    def __init__(self, *args, **kwargs):
+        self.store = dict()
+        self.update(dict(*args, **kwargs))
+
+    def __getitem__(self, key):
+        assert isinstance(key, uuid.UUID)
+
+        return self.store[key]
+
+    def __setitem__(self, key, value):
+        assert isinstance(key, uuid.UUID)
+        assert isinstance(value, TrackInfo)
+
+        self.store[key] = value
+
+    def __delitem__(self, key):
+        assert isinstance(key, uuid.UUID)
+
+        del self.store[key]
+
+    def __iter__(self):
+        return iter(self.store)
+
+    def __len__(self):
+        return len(self.store)
-- 
2.7.4

