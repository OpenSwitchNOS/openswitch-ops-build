diff --git a/Makefile b/Makefile
index 9dbb29f..823a90e 100644
--- a/Makefile
+++ b/Makefile
@@ -32,6 +32,7 @@ DEFINES += -D_GNU_SOURCE
 CCOPTS = -O2
 WFLAGS := -Wall -Wstrict-prototypes  -Wmissing-prototypes
 WFLAGS += -Wmissing-declarations -Wold-style-definition -Wformat=2
+WFLAGS += -Werror
 
 CFLAGS = $(WFLAGS) $(CCOPTS) -I../include $(DEFINES)
 YACCFLAGS = -d -t -v
@@ -55,12 +56,12 @@ install: all
 	install -m 0755 -d $(DESTDIR)$(ARPDDIR)
 	install -m 0755 -d $(DESTDIR)$(DOCDIR)/examples
 	install -m 0755 -d $(DESTDIR)$(DOCDIR)/examples/diffserv
-	install -m 0644 README.iproute2+tc $(shell find examples -maxdepth 1 -type f) \
+	install -m 0644 README.iproute2+tc $(shell find -L examples -maxdepth 1 -type f) \
 		$(DESTDIR)$(DOCDIR)/examples
-	install -m 0644 $(shell find examples/diffserv -maxdepth 1 -type f) \
+	install -m 0644 $(shell find -L examples/diffserv -maxdepth 1 -type f) \
 		$(DESTDIR)$(DOCDIR)/examples/diffserv
 	@for i in $(SUBDIRS) doc; do $(MAKE) -C $$i install; done
-	install -m 0644 $(shell find etc/iproute2 -maxdepth 1 -type f) $(DESTDIR)$(CONFDIR)
+	install -m 0644 $(shell find -L etc/iproute2 -maxdepth 1 -type f) $(DESTDIR)$(CONFDIR)
 
 snapshot:
 	echo "static const char SNAPSHOT[] = \""`date +%y%m%d`"\";" \
diff --git a/debian/changelog b/debian/changelog
new file mode 100644
index 0000000..00eef24
--- /dev/null
+++ b/debian/changelog
@@ -0,0 +1,10 @@
+iproute2 (1.mlnx.@SED_VERSION@) unstable; urgency=low
+
+  [ MLNX ]
+  * Adding sx_netdev support to iproute2 3.19.
+
+ -- Tsur Doron <doront@mellanox.com>  Wed, 08 Jul 2015 16:25:44 +0300
+
+Local variables:
+mode: debian-changelog
+End:
diff --git a/debian/compat b/debian/compat
new file mode 100644
index 0000000..45a4fb7
--- /dev/null
+++ b/debian/compat
@@ -0,0 +1 @@
+8
diff --git a/debian/control b/debian/control
new file mode 100644
index 0000000..0dca4bf
--- /dev/null
+++ b/debian/control
@@ -0,0 +1,41 @@
+Source: iproute2
+Section: net
+Priority: optional
+Maintainer: Mellanox maintainer <doront@mellanox.com>
+Uploaders: Doron Tsur <doront@mellanox.com>
+Homepage: https://www.kernel.org/pub/linux/utils/net/iproute2/
+Standards-Version: 3.9.2
+Build-Depends: iptables-dev,
+               libdb-dev,
+               linux-libc-dev,
+               debhelper (>= 8),
+               pkg-config,
+               bison,
+               flex
+
+Package: iproute2
+Priority: important
+Architecture: any
+Provides: arpd
+Conflicts: arpd
+Depends: ${shlibs:Depends}, ${misc:Depends}
+Suggests: iproute2-doc
+Multi-Arch: foreign
+Description: networking and traffic control tools
+ The iproute2 suite, also known as iproute2, is a collection of
+ utilities for networking and traffic control.
+ .
+ These tools communicate with the Linux kernel via the (rt)netlink
+ interface, providing advanced features not available through the
+ legacy net-tools commands 'ifconfig' and 'route'.
+
+Package: iproute2-dev
+Section: libdevel
+Architecture: any
+Depends: ${misc:Depends}
+Description: networking and traffic control tools - development files
+ The iproute2 suite, also known as iproute2, is a collection of
+ utilities for networking and traffic control.
+ .
+ This package contains the header files and static libraries for
+ compiling iproute2 extensions, and is needed only for development.
diff --git a/debian/copyright b/debian/copyright
new file mode 100644
index 0000000..e295b9e
--- /dev/null
+++ b/debian/copyright
@@ -0,0 +1,43 @@
+This is the Debian GNU/Linux's prepackaged version of the
+Linux Traffic Control engine and related utils, "iproute"
+
+The source code was obtained from
+  https://www.kernel.org/pub/linux/utils/net/iproute2/
+
+Copyrights
+----------
+Copyright (C) 1996-2001 Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
+Copyright (C)           Stephen Hemminger <shemminger@osdl.org>
+and others, including, but not limited to
+  Copyright (C) 2004    USAGI/WIDE Project
+  Copyright (C)         J Hadi Salim (hadi@cyberus.ca)
+
+Modifications for Debian:
+  Copyright (C) 1996 Tom Lees <tom@lpsg.demon.co.uk>
+  Copyright (C) 1998 Christoph Lameter <christoph@lameter.com>
+  Copyright (C) 1998-1999 Roberto Lumbreras <rover@debian.org>
+  Copyright (C) 1999-2003 Juan Cespedes <cespedes@debian.org>
+  Copyright (C) 2005- Alexander Wirt <formorer@debian.org>
+  Copyright (C) 2015 Mellanox Technologies, Ltd.
+
+
+License
+-------
+
+This program is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+This program is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+A copy of the GNU General Public License is available as
+`/usr/share/common-licenses/GPL' in the Debian GNU/Linux distribution
+or on the World Wide Web at `http://www.gnu.org/copyleft/gpl.html'.
+You can also obtain it by writing to the Free Software Foundation,
+Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
+MA 02110-1301, USA.
+
diff --git a/debian/iproute2-dev.install b/debian/iproute2-dev.install
new file mode 100644
index 0000000..ed0d282
--- /dev/null
+++ b/debian/iproute2-dev.install
@@ -0,0 +1,2 @@
+include/libnetlink.h /usr/include
+lib/libnetlink.a /usr/lib
diff --git a/debian/iproute2.install b/debian/iproute2.install
new file mode 100644
index 0000000..4b08309
--- /dev/null
+++ b/debian/iproute2.install
@@ -0,0 +1,8 @@
+misc/ss ip/ip /bin
+ip/rtmon tc/tc misc/rtacct /sbin
+misc/lnstat misc/nstat /usr/bin/
+ip/routef ip/routel /usr/bin
+etc/* /etc
+tc/*.so /usr/lib/tc
+misc/arpd /usr/sbin
+netem/*.dist /usr/lib/tc
diff --git a/debian/iproute2.links b/debian/iproute2.links
new file mode 100644
index 0000000..9dcf49c
--- /dev/null
+++ b/debian/iproute2.links
@@ -0,0 +1,4 @@
+/usr/bin/lnstat usr/bin/rtstat
+/usr/bin/lnstat usr/bin/ctstat
+bin/ip sbin/ip
+/usr/lib/tc/m_xt.so usr/lib/tc/m_ipt.so
diff --git a/debian/iproute2.manpages b/debian/iproute2.manpages
new file mode 100644
index 0000000..7f0e0c2
--- /dev/null
+++ b/debian/iproute2.manpages
@@ -0,0 +1 @@
+debian/tmp/usr/share/man/*/*
diff --git a/debian/rules b/debian/rules
new file mode 100755
index 0000000..57db63c
--- /dev/null
+++ b/debian/rules
@@ -0,0 +1,19 @@
+#!/usr/bin/make -f
+
+%:
+	dh $@
+
+override_dh_clean:
+	dh_clean
+	make distclean
+	-rm -f doc/*.txt
+
+override_dh_installexamples:
+	dh_installexamples -p iproute-doc examples/*
+
+override_dh_shlibdeps:
+	dh_shlibdeps -a -Xq_atm.so -Xm_xt.so -Xm_ipt.so
+
+
+override_dh_auto_build:
+	$(MAKE) KERNEL_INCLUDE=./include
diff --git a/include/SNAPSHOT.h b/include/SNAPSHOT.h
index 35bda66..1780d9c 100644
--- a/include/SNAPSHOT.h
+++ b/include/SNAPSHOT.h
@@ -1 +1 @@
-static const char SNAPSHOT[] = "150210";
+static const char SNAPSHOT[] = "150210_mlnx";
diff --git a/include/namespace.h b/include/namespace.h
index a2ac7dc..d1bff66 100644
--- a/include/namespace.h
+++ b/include/namespace.h
@@ -6,6 +6,12 @@
 #include <sys/syscall.h>
 #include <errno.h>
 
+#ifndef HAVE_SETNS
+#ifdef __NR_setns
+#include <unistd.h>
+#endif
+#endif
+
 #define NETNS_RUN_DIR "/var/run/netns"
 #define NETNS_ETC_DIR "/etc/netns"
 
diff --git a/ip/Makefile b/ip/Makefile
index 2c742f3..d1abff6 100644
--- a/ip/Makefile
+++ b/ip/Makefile
@@ -6,7 +6,8 @@ IPOBJ=ip.o ipaddress.o ipaddrlabel.o iproute.o iprule.o ipnetns.o \
     iplink_macvlan.o iplink_macvtap.o ipl2tp.o link_vti.o link_vti6.o \
     iplink_vxlan.o tcp_metrics.o iplink_ipoib.o ipnetconf.o link_ip6tnl.o \
     link_iptnl.o link_gre6.o iplink_bond.o iplink_bond_slave.o iplink_hsr.o \
-    iplink_bridge.o iplink_bridge_slave.o ipfou.o iplink_ipvlan.o
+    iplink_bridge.o iplink_bridge_slave.o ipfou.o iplink_ipvlan.o \
+    iplink_sxnet.o iplink_sx_bridge.o
 
 RTMONOBJ=rtmon.o
 
diff --git a/ip/iplink.c b/ip/iplink.c
index c93d1dc..9a463b9 100644
--- a/ip/iplink.c
+++ b/ip/iplink.c
@@ -91,7 +91,7 @@ void iplink_usage(void)
 		fprintf(stderr, "TYPE := { vlan | veth | vcan | dummy | ifb | macvlan | macvtap |\n");
 		fprintf(stderr, "          bridge | bond | ipoib | ip6tnl | ipip | sit | vxlan |\n");
 		fprintf(stderr, "          gre | gretap | ip6gre | ip6gretap | vti | nlmon |\n");
-		fprintf(stderr, "          bond_slave | ipvlan }\n");
+		fprintf(stderr, "          bond_slave | ipvlan | sx_netdev | sx_bridge }\n");
 	}
 	exit(-1);
 }
diff --git a/ip/iplink_sx_bridge.c b/ip/iplink_sx_bridge.c
new file mode 100644
index 0000000..1750f78
--- /dev/null
+++ b/ip/iplink_sx_bridge.c
@@ -0,0 +1,99 @@
+/*
+ * iplink_sx_bridge.c	Mellanox switch netdev device support
+ *
+ *              This program is free software; you can redistribute it and/or
+ *              modify it under the terms of the GNU General Public License
+ *              as published by the Free Software Foundation; either version
+ *              2 of the License, or (at your option) any later version.
+ *
+ * Authors:     Tamar Warshai <tamard@mellanox.com>
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/socket.h>
+#include <linux/if_link.h>
+
+#include "rt_names.h"
+#include "utils.h"
+#include "ip_common.h"
+
+/* ip link add [dev_name] type sx_bridge id [bridge_id]*/
+enum {
+	IFLA_SX_BRIDGE_UNSPEC,
+	IFLA_SX_BRIDGE_ID,
+	__IFLA_SX_BRIDGE_MAX
+};
+#define IFLA_SX_BRIDGE_MAX  (__IFLA_SX_BRIDGE_MAX - 1)
+
+
+static void print_explain(FILE *f)
+{
+	fprintf(f, "Usage: ... sx_bridge id BRIDGE\n");
+	fprintf(f, "\n");
+	fprintf(f, "Where: BRIDGE := Bridge ID\n");
+}
+
+static void explain(void)
+{
+	print_explain(stderr);
+}
+
+static int sx_bridge_parse_opt(struct link_util *lu, int argc, char **argv,
+			   struct nlmsghdr *n)
+{
+    int bridge_set = 0;
+    __u16 bridge = 0;
+
+	while (argc > 0) {
+		if (!matches(*argv, "id")) {
+			NEXT_ARG();
+			if (get_u16(&bridge, *argv, 0))
+				invarg("invalid id", *argv);
+			bridge_set = 1;
+		} else {
+			fprintf(stderr, "sx_bridge: unknown command \"%s\"?\n", *argv);
+			explain();
+			return -1;
+		}
+		argc--, argv++;
+	}
+
+	if (!bridge_set)  {
+		fprintf(stderr, "sx_bridge: missing virtual network identifier\n");
+		return -1;
+	}
+
+	addattr16(n, 1024, IFLA_SX_BRIDGE_ID, bridge);
+
+	return 0;
+}
+
+static void sx_bridge_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
+{
+	__u16 i;
+
+	if (!tb)
+		return;
+
+	if (tb[IFLA_SX_BRIDGE_ID] && (RTA_PAYLOAD(tb[IFLA_SX_BRIDGE_ID]) < sizeof(__u16))) {
+		i = rta_getattr_u16(tb[IFLA_SX_BRIDGE_ID]);
+		fprintf(f, "id %u ", i);
+	}
+
+}
+
+static void sx_bridge_print_help(struct link_util *lu, int argc, char **argv,
+	FILE *f)
+{
+	print_explain(f);
+}
+
+struct link_util sx_bridge_link_util = {
+	.id		    = "sx_bridge",
+	.maxattr	= IFLA_SX_BRIDGE_MAX,
+	.parse_opt	= sx_bridge_parse_opt,
+	.print_opt	= sx_bridge_print_opt,
+	.print_help	= sx_bridge_print_help,
+};
diff --git a/ip/iplink_sxnet.c b/ip/iplink_sxnet.c
new file mode 100644
index 0000000..d574579
--- /dev/null
+++ b/ip/iplink_sxnet.c
@@ -0,0 +1,146 @@
+/*
+ * iplink_sxnet.c	Mellanox switch netdev device support
+ *
+ *              This program is free software; you can redistribute it and/or
+ *              modify it under the terms of the GNU General Public License
+ *              as published by the Free Software Foundation; either version
+ *              2 of the License, or (at your option) any later version.
+ *
+ * Authors:     Elad Raz <eladr@mellanox.com>
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/socket.h>
+#include <linux/if_link.h>
+
+#include "rt_names.h"
+#include "utils.h"
+#include "ip_common.h"
+
+/* ip link add eth_p1 type sx_netdev swid 0 port 0x10100 type l2/l3*/
+enum {
+	IFLA_SX_NETDEV_UNSPEC,
+	IFLA_SX_NETDEV_SWID,
+	IFLA_SX_NETDEV_PORT,
+	IFLA_SX_NETDEV_TYPE,
+	__IFLA_SX_NETDEV_MAX
+};
+enum {
+	IFLA_SX_NETDEV_TYPE_L2 = 0,
+	IFLA_SX_NETDEV_TYPE_L3 = 1,
+	__IFLA_SX_NETDEV_TYPE_MAX
+};
+#define IFLA_SX_NETDEV_MAX  (__IFLA_SX_NETDEV_MAX - 1)
+
+
+static void print_explain(FILE *f)
+{
+	fprintf(f, "Usage: ... sx_netdev swid <swid> port <logical port> type <l3 | l2>\n");
+	fprintf(f, "\n");
+	fprintf(f, "Where: SWID := 0-8\n");
+	fprintf(f, "       PORT := Logical port number\n");
+	fprintf(f, "       TYPE := l2 | l3\n");
+}
+
+static void explain(void)
+{
+	print_explain(stderr);
+}
+
+static int sx_netdev_parse_opt(struct link_util *lu, int argc, char **argv,
+			   struct nlmsghdr *n)
+{
+	__u32 swid = 0;
+	int swid_set = 0;
+	__u32 port = 0;
+	int port_set = 0;
+	__u32 type = IFLA_SX_NETDEV_TYPE_L2;
+
+	while (argc > 0) {
+		if (!matches(*argv, "swid")) {
+			NEXT_ARG();
+			if (get_u32(&swid, *argv, 0) ||
+			    swid >= 8)
+				invarg("invalid swid", *argv);
+			swid_set = 1;
+		} else if (!matches(*argv, "port")) {
+			NEXT_ARG();
+			if (get_u32(&port, *argv, 0))
+				invarg("invalid port", *argv);
+			port_set = 1;
+		} else if (!matches(*argv, "type")) {
+			NEXT_ARG();
+			if (strcasecmp(*argv, "l2") == 0) {
+				type = IFLA_SX_NETDEV_TYPE_L2;
+			} else if (strcasecmp(*argv, "l3") == 0) {
+				type = IFLA_SX_NETDEV_TYPE_L3;
+			} else {
+				invarg("invalid type. Must be `l2` or `l3`", *argv);
+			}
+		} else {
+			fprintf(stderr, "sx_netdev: unknown command \"%s\"?\n", *argv);
+			explain();
+			return -1;
+		}
+		argc--, argv++;
+	}
+
+	if (!swid_set || !port_set)  {
+		fprintf(stderr, "sx_netdev: missing virtual network identifier\n");
+		return -1;
+	}
+
+	addattr32(n, 1024, IFLA_SX_NETDEV_SWID, swid);
+
+	if (port_set)
+		addattr32(n, 1024, IFLA_SX_NETDEV_PORT, port);
+
+	addattr32(n, 1024, IFLA_SX_NETDEV_TYPE, type);
+
+	return 0;
+}
+
+static void sx_netdev_print_opt(struct link_util *lu, FILE *f, struct rtattr *tb[])
+{
+	__u32 i;
+
+	if (!tb)
+		return;
+
+	if (tb[IFLA_SX_NETDEV_SWID] && (RTA_PAYLOAD(tb[IFLA_SX_NETDEV_SWID]) < sizeof(__u32))) {
+		i = rta_getattr_u32(tb[IFLA_SX_NETDEV_SWID]);
+		fprintf(f, "swid %u ", i);
+	}
+
+	if (tb[IFLA_SX_NETDEV_PORT] && (RTA_PAYLOAD(tb[IFLA_SX_NETDEV_PORT]) < sizeof(__u32))) {
+		i = rta_getattr_u32(tb[IFLA_SX_NETDEV_PORT]);
+		fprintf(f, "port %X ", i);
+	}
+
+	if (tb[IFLA_SX_NETDEV_TYPE] && (RTA_PAYLOAD(tb[IFLA_SX_NETDEV_TYPE]) < sizeof(__u32))) {
+		i = rta_getattr_u32(tb[IFLA_SX_NETDEV_TYPE]);
+		fprintf(f, "type ");
+		switch (i) {
+			case IFLA_SX_NETDEV_TYPE_L2: fprintf(f, "l2"); break;
+			case IFLA_SX_NETDEV_TYPE_L3: fprintf(f, "l3"); break;
+			default:
+				fprintf(f, "%d <unknown>", i); break;
+		}
+	}
+}
+
+static void sx_netdev_print_help(struct link_util *lu, int argc, char **argv,
+	FILE *f)
+{
+	print_explain(f);
+}
+
+struct link_util sx_netdev_link_util = {
+	.id		= "sx_netdev",
+	.maxattr	= IFLA_SX_NETDEV_MAX,
+	.parse_opt	= sx_netdev_parse_opt,
+	.print_opt	= sx_netdev_print_opt,
+	.print_help	= sx_netdev_print_help,
+};
diff --git a/ip/tcp_metrics.c b/ip/tcp_metrics.c
index bbbb4cc..c86891c 100644
--- a/ip/tcp_metrics.c
+++ b/ip/tcp_metrics.c
@@ -97,7 +97,7 @@ static int process_msg(const struct sockaddr_nl *who, struct nlmsghdr *n,
 	int len = n->nlmsg_len;
 	char abuf[256];
 	inet_prefix daddr, saddr;
-	int family, i, atype, stype, dlen = 0, slen = 0;
+	int family, i, atype, stype = TCP_METRICS_ATTR_SADDR_IPV4, dlen = 0, slen = 0;
 
 	if (n->nlmsg_type != genl_family)
 		return -1;
diff --git a/misc/Makefile b/misc/Makefile
index 004bcc3..105de12 100644
--- a/misc/Makefile
+++ b/misc/Makefile
@@ -1,7 +1,18 @@
 SSOBJ=ss.o ssfilter.o
 LNSTATOBJ=lnstat.o lnstat_util.o
 
-TARGETS=ss nstat ifstat rtacct arpd lnstat
+TARGETS=ss nstat ifstat rtacct lnstat
+
+# Allow arpd exclude for platform which has no simple Berkeley DB support
+
+# From man arpd:
+# The arpd daemon collects gratuitous ARP information, saving it on local disk
+# and feeding it to the kernel on demand to avoid redundant broadcasting due to
+# limited size of the kernel ARP cache.
+
+ifneq ($(EXCLUDE_ARPD_BUILD),1)
+TARGETS+=arpd
+endif
 
 include ../Config
 
diff --git a/tc/m_simple.c b/tc/m_simple.c
index 866552f..bf9425e 100644
--- a/tc/m_simple.c
+++ b/tc/m_simple.c
@@ -138,7 +138,7 @@ parse_simple(struct action_util *a, int *argc_p, char ***argv_p, int tca_id,
 	}
 
 	if (strlen(simpdata) > (SIMP_MAX_DATA - 1)) {
-		fprintf(stderr, "simple: Illegal string len %ld <%s> \n",
+		fprintf(stderr, "simple: Illegal string len %zd <%s> \n",
 			strlen(simpdata), simpdata);
 		return -1;
 	}
