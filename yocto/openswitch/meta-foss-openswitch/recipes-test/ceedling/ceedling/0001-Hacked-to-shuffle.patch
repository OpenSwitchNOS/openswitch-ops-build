From 70c08a07794de830a0c296fb28cd057ef7c73976 Mon Sep 17 00:00:00 2001
From: Damien Keehn <damien.keehn@hpe.com>
Date: Fri, 25 Mar 2016 15:43:59 -0700
Subject: [PATCH 1/1] Hacked to shuffle

---
 auto/generate_test_runner.rb | 158 ++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 148 insertions(+), 10 deletions(-)

diff --git a/auto/generate_test_runner.rb b/auto/generate_test_runner.rb
index aeed0b2..fedc010 100644
--- a/auto/generate_test_runner.rb
+++ b/auto/generate_test_runner.rb
@@ -73,11 +73,13 @@ class UnityTestRunnerGenerator

   def generate(input_file, output_file, tests, used_mocks, testfile_includes)
     File.open(output_file, 'w') do |output|
-      create_header(output, used_mocks, testfile_includes)
+      create_header(output, used_mocks, testfile_includes, tests)
       create_externs(output, tests, used_mocks)
       create_mock_management(output, used_mocks)
       create_suite_setup_and_teardown(output)
       create_reset(output, used_mocks)
+      create_shuffleTests(output)
+      create_test_funcs(output,tests)
       create_main(output, input_file, tests, used_mocks)
     end

@@ -153,15 +155,40 @@ class UnityTestRunnerGenerator
     return mock_headers
   end

-  def create_header(output, mocks, testfile_includes=[])
+  def count_tests(tests)
+      if (@options[:use_param_tests])
+         #puts "THIS IS PARAM TEST #{tests}"
+         idx=0
+         tests.each do |test|
+           #if paramaterized tests, count sub tests
+           if ((test[:args].nil?) or (test[:args].empty?))
+               idx=idx + 1
+           else
+               test[:args].each do |args|
+                  idx=idx + 1
+               end
+           end
+         end
+         return idx
+      else
+         #puts "THIS IS NO PARAM TEST"
+         return tests.size
+      end
+  end
+
+
+  def create_header(output, mocks, testfile_includes=[], tests)
     output.puts('/* AUTOGENERATED FILE. DO NOT EDIT. */')
-    create_runtest(output, mocks)
     output.puts("\n//=======Automagically Detected Files To Include=====")
     output.puts("#include \"#{@options[:framework].to_s}.h\"")
     output.puts('#include "cmock.h"') unless (mocks.empty?)
     output.puts('#include <setjmp.h>')
     output.puts('#include <stdio.h>')
+    output.puts('#include <time.h>')
+    output.puts('#include <stdlib.h>')
+    output.puts('#include <string.h>')
     output.puts('#include "CException.h"') if @options[:plugins].include?(:cexception)
+    create_makeTestFunctest(output, mocks)
     if (@options[:header_file] && !@options[:header_file].empty?)
       output.puts("#include \"#{File.basename(@options[:header_file])}\"")
     else
@@ -181,6 +208,12 @@ class UnityTestRunnerGenerator
       output.puts('int GlobalVerifyOrder;')
       output.puts('char* GlobalOrderError;')
     end
+      #shuffling
+      testCount = count_tests(tests)
+      output.puts("#define numTests #{testCount}")
+      output.puts('char * filter="";')
+      output.puts('int seed = -1;')
+      output.puts('void (*testFunctionPtrs[numTests]) (); //function pointers to tests')
   end

   def create_externs(output, tests, mocks)
@@ -276,6 +309,38 @@ class UnityTestRunnerGenerator
     output.puts("}\n")
   end

+  def create_makeTestFunctest(output, used_mocks)
+    cexception = @options[:plugins].include? :cexception
+    va_args1   = @options[:use_param_tests] ? ', ...' : ''
+    va_args2   = @options[:use_param_tests] ? '__VA_ARGS__' : ''
+    output.puts("#define RUN_TEST_NO_ARGS") if @options[:use_param_tests]
+    output.puts("\n//=======Test Runner Used To Run Each Test Below=====")
+    output.puts("#define MAKE_TEST_FUNC(Name, TestFunc, TestLineNum#{va_args1}) \\")
+    output.puts("void my##Name(){ \\")
+    output.puts("  if(!strstr(#TestFunc, filter)){return;} \\")
+    output.puts("  Unity.CurrentTestName = #TestFunc#{va_args2.empty? ? '' : " \"(\" ##{va_args2} \")\""}; \\")
+    output.puts("  Unity.CurrentTestLineNumber = TestLineNum; \\")
+    output.puts("  Unity.NumberOfTests++; \\")
+    output.puts("  CMock_Init(); \\") unless (used_mocks.empty?)
+    output.puts("  UNITY_CLR_DETAILS(); \\") unless (used_mocks.empty?)
+    output.puts("  if (TEST_PROTECT()) \\")
+    output.puts("  { \\")
+    output.puts("    CEXCEPTION_T e; \\") if cexception
+    output.puts("    Try { \\") if cexception
+    output.puts("      #{@options[:setup_name]}(); \\")
+    output.puts("      TestFunc(#{va_args2}); \\")
+    output.puts("    } Catch(e) { TEST_ASSERT_EQUAL_HEX32_MESSAGE(CEXCEPTION_NONE, e, \"Unhandled Exception!\"); } \\") if cexception
+    output.puts("  } \\")
+    output.puts("  if (TEST_PROTECT() && !TEST_IS_IGNORED) \\")
+    output.puts("  { \\")
+    output.puts("    #{@options[:teardown_name]}(); \\")
+    output.puts("    CMock_Verify(); \\") unless (used_mocks.empty?)
+    output.puts("  } \\")
+    output.puts("  CMock_Destroy(); \\") unless (used_mocks.empty?)
+    output.puts("  UnityConcludeTest(); \\")
+    output.puts("}\n")
+  end
+
   def create_reset(output, used_mocks)
     output.puts("\n//=======Test Reset Option=====")
     output.puts("void resetTest(void);")
@@ -289,27 +354,100 @@ class UnityTestRunnerGenerator
     output.puts("}")
   end

+def create_shuffleTests(output)
+    output.puts("\n\n//=======Shuffle the tests=====")
+    output.puts("void shuffleTests( int seed){")
+    output.puts("   int i,j;")
+    output.puts("   void (*temp)();")
+    output.puts("")
+    output.puts("   srand(seed);")
+    output.puts("   int arSize = numTests;")
+    output.puts("   printf(\"Shuffling %d tests with seed %d\\n\", arSize,seed);")
+    output.puts("   for(i=0; i < arSize; i++){")
+    output.puts("      j = (rand() % (arSize -1)) +1;")
+    output.puts("      temp = testFunctionPtrs[i];")
+    output.puts("      testFunctionPtrs[i] = testFunctionPtrs[j];")
+    output.puts("      testFunctionPtrs[j] = temp;")
+    output.puts("   }")
+    output.puts("}")
+   end
+
+  def create_test_funcs(output,tests)
+    output.puts("\n\n//=======Test Macros===== #{tests.size}")
+    idx=0
+    if (@options[:use_param_tests])
+      tests.each do |test|
+        if ((test[:args].nil?) or (test[:args].empty?))
+            output.puts("  MAKE_TEST_FUNC(#{test[:test]}#{idx}, #{test[:test]}, #{test[:line_number]}, RUN_TEST_NO_ARGS);")
+            idx=idx + 1
+        else
+            test[:args].each do |args|
+               output.puts("  MAKE_TEST_FUNC(#{test[:test]}#{idx}, #{test[:test]}, #{test[:line_number]}, #{args});")
+               idx=idx + 1
+            end
+        end
+      end
+    else
+      tests.each do |test|
+         output.puts(" MAKE_TEST_FUNC(#{test[:test]}#{idx}, #{test[:test]}, #{test[:line_number]})")
+         idx=idx + 1
+      end
+    end
+  end
+
+
   def create_main(output, filename, tests, used_mocks)
     output.puts("\n\n//=======MAIN=====")
     if (@options[:main_name] != "main")
-      output.puts("int #{@options[:main_name]}(void);")
+      output.puts("int #{@options[:main_name]}(int argc, char *argv[] );")
     end
-    output.puts("int #{@options[:main_name]}(void)")
+    output.puts("int #{@options[:main_name]}(int argc, char *argv[] )")
     output.puts("{")
+    output.puts("  int seed=0;")
+    output.puts("  if( argc > 1 ) { filter= argv[1]; ")
+    output.puts("    if(strstr(filter,\"-help\")){printf(\"usage- thisBinary [testFilter] [shuffle|numericSeed]\\n\");return;} ")
+    output.puts("  ")
+    output.puts("   }")
+    output.puts("  if( argc > 2 ) {")
+    output.puts("    char *ptr;")
+    output.puts("    if(strstr(argv[2], \"shuffle\")){")
+    output.puts("      seed=time(NULL);")
+    output.puts("    }else{")
+    #output.puts("      printf(\"Using seed %s\",argv[2]);")
+    output.puts("      seed= strtoul(argv[2], &ptr,10);")
+    output.puts("    }")
+    output.puts("  }")
     output.puts("  suite_setup();") unless @options[:suite_setup].nil?
     output.puts("  UnityBegin(\"#{filename.gsub(/\\/,'\\\\')}\");")
+
+    idx=0
     if (@options[:use_param_tests])
       tests.each do |test|
         if ((test[:args].nil?) or (test[:args].empty?))
-          output.puts("  RUN_TEST(#{test[:test]}, #{test[:line_number]}, RUN_TEST_NO_ARGS);")
+            output.puts("  testFunctionPtrs[#{idx}]=my#{test[:test]}#{idx};")
+            idx=idx + 1
         else
-          test[:args].each {|args| output.puts("  RUN_TEST(#{test[:test]}, #{test[:line_number]}, #{args});")}
+            test[:args].each do |args|
+               output.puts("  testFunctionPtrs[#{idx}]=my#{test[:test]}#{idx};")
+               idx=idx + 1
+            end
         end
       end
     else
-        tests.each { |test| output.puts("  RUN_TEST(#{test[:test]}, #{test[:line_number]});") }
+      tests.each do |test|
+         output.puts("  testFunctionPtrs[#{idx}]=my#{test[:test]}#{idx};")
+         idx=idx + 1
+      end
     end
-    output.puts()
+
+    output.puts("")
+    output.puts("  if(seed != 0)shuffleTests(seed);")
+    output.puts("")
+    output.puts("  int i;")
+    output.puts("  for(i=0; i< numTests; i++){")
+    output.puts("     (*testFunctionPtrs[i])();")
+    output.puts("  }")
+    output.puts("")
     output.puts("  CMock_Guts_MemFreeFinal();") unless used_mocks.empty?
     output.puts("  return #{@options[:suite_teardown].nil? ? "" : "suite_teardown"}(UnityEnd());")
     output.puts("}")
--
1.9.1

