diff --git a/makefiles/bm.mk b/makefiles/bm.mk
index 1d16cb2..65d3841 100644
--- a/makefiles/bm.mk
+++ b/makefiles/bm.mk
@@ -112,9 +112,13 @@ ifdef PLUGIN_LIBS
 BM_PLUGIN_LIBS := $(addprefix $(LIB_DIR)/, $(PLUGIN_LIBS))
 endif
 
+ifdef HAVE_REDIS
+hiredis_LIB := -lhiredis
+endif
+
 BINARY := bm
 bm_LINK_LIBS := $(OBJ_FILES) $(BM_LIB) $(p4utils_LIB) $(p4ns_common_LIB) $(BMI_LIB) $(addprefix $(LIBRARY_DIR)/, $(LIBRARY_TARGETS)) $(addprefix $(LIBRARY_DIR)/, $(LIBRARY_TARGETS))  $(BM_PLUGIN_LIBS)
-bm : EXTRA_LINK_LIBS := ${BM_LIB} ${BM_LIBS_OPTIONAL} ${p4utils_LIB} ${BM_LIB} -lpthread -lpcap -lhiredis -lJudy -lthrift -ledit
+bm : EXTRA_LINK_LIBS := ${BM_LIB} ${BM_LIBS_OPTIONAL} ${p4utils_LIB} ${BM_LIB} -lpthread -lpcap $(hiredis_LIB) -lJudy -lthrift -ledit
 include ${MAKEFILES_DIR}/bin.mk
 
 bm : ${BM_LIB} $(bm_BINARY) ${GEN_THRIFT_PY_MODULE}
diff --git a/modules/p4ns_common/module/inc/p4ns_common/p4ns_db.h b/modules/p4ns_common/module/inc/p4ns_common/p4ns_db.h
index 938ba6a..faff5f6 100644
--- a/modules/p4ns_common/module/inc/p4ns_common/p4ns_db.h
+++ b/modules/p4ns_common/module/inc/p4ns_common/p4ns_db.h
@@ -17,7 +17,9 @@ limitations under the License.
 #ifndef _P4NS_DB_H_
 #define _P4NS_DB_H_
 
+#if defined(HAVE_REDIS)
 #include <hiredis/hiredis.h>
+#endif
 #include "p4ns_utils.h"
 
 #define P4NSDB_DEFAULT_PORT 6379
@@ -29,7 +31,11 @@ limitations under the License.
 #define P4NSDB_ERROR_PORT_EXISTS 21
 #define P4NSDB_ERROR_PORT_NUM_TAKEN 30
 
+#if defined(HAVE_REDIS)
 typedef redisContext *p4ns_db_cxt_t;
+#else
+typedef void *p4ns_db_cxt_t;
+#endif
 
 p4ns_db_cxt_t p4ns_db_connect(char *ipv4, uint16_t port);
 void p4ns_db_free(p4ns_db_cxt_t c);
diff --git a/modules/p4ns_common/module/src/p4ns_db.c b/modules/p4ns_common/module/src/p4ns_db.c
index d02490e..0284d74 100644
--- a/modules/p4ns_common/module/src/p4ns_db.c
+++ b/modules/p4ns_common/module/src/p4ns_db.c
@@ -37,25 +37,35 @@ typedef struct p4ns_config_s {
 
 
 p4ns_db_cxt_t p4ns_db_connect(char *ipv4, uint16_t port) {
+#if defined(HAVE_REDIS)
   struct timeval timeout = { DB_CONNECT_TIMEOUT_SECS, 0 };
   redisContext *c = redisConnectWithTimeout(ipv4, port, timeout);
   if (c == NULL || c->err) {
     return NULL;
   }
   return c;
+#else
+  return NULL;
+#endif
 }
 
 void p4ns_db_free(p4ns_db_cxt_t c){
+#if defined(HAVE_REDIS)
   redisFree(c);
+#endif
 }
 
 int p4ns_db_has_datapath(p4ns_db_cxt_t c,
 			 const char *name) {
+#if defined(HAVE_REDIS)
   redisReply *reply;
   reply = redisCommand(c, "EXISTS %s", name);
   int ret = (reply->integer == 1);
   freeReplyObject(reply);
   return ret;
+#else
+  return 0;
+#endif
 }
 
 int p4ns_db_add_datapath(p4ns_db_cxt_t c,
@@ -64,6 +74,7 @@ int p4ns_db_add_datapath(p4ns_db_cxt_t c,
     return P4NSDB_ERROR_DATAPATH_EXISTS;
   }
 
+#if defined(HAVE_REDIS)
   redisReply *reply;
 
   p4ns_config_t p4ns_config;
@@ -74,6 +85,7 @@ int p4ns_db_add_datapath(p4ns_db_cxt_t c,
   reply = redisCommand(c, "SET %s %b", name,
 		       (char *) &p4ns_config, sizeof(p4ns_config_t));
   freeReplyObject(reply);
+#endif
   
   return 0;
 }
@@ -81,6 +93,7 @@ int p4ns_db_add_datapath(p4ns_db_cxt_t c,
 int p4ns_db_set_listener(p4ns_db_cxt_t c,
 			 const char *name,
 			 p4ns_tcp_over_ip_t *listener) {
+#if defined(HAVE_REDIS)
   redisReply *reply1, *reply2;
   reply1 = redisCommand(c, "GET %s", name);
   if(!reply1->str) {
@@ -95,6 +108,7 @@ int p4ns_db_set_listener(p4ns_db_cxt_t c,
 			(char *) p4ns_config, sizeof(p4ns_config_t));
   freeReplyObject(reply1);
   freeReplyObject(reply2);
+#endif
   
   return 0;
 }
@@ -102,6 +116,7 @@ int p4ns_db_set_listener(p4ns_db_cxt_t c,
 int p4ns_db_get_listener(p4ns_db_cxt_t c,
 			 const char *name,
 			 p4ns_tcp_over_ip_t *listener) {
+#if defined(HAVE_REDIS)
   redisReply *reply;
   reply = redisCommand(c, "GET %s", name);
   if(!reply->str) {
@@ -113,6 +128,7 @@ int p4ns_db_get_listener(p4ns_db_cxt_t c,
   memcpy(listener, &p4ns_config->listener, sizeof(p4ns_tcp_over_ip_t));
 
   freeReplyObject(reply);
+#endif
   
   return 0;
 }
@@ -129,21 +145,29 @@ static inline void get_port_nums_key(char *dest, const char *name) {
 static int has_port(p4ns_db_cxt_t c,
 		    const char *ports_key,
 		    const char *iface) {
+#if defined(HAVE_REDIS)
   redisReply *reply;
   reply = redisCommand(c, "HEXISTS %s %s", ports_key, iface);
   int ret = (reply->integer == 1);
   freeReplyObject(reply);
   return ret;
+#else
+  return 0;
+#endif
 }
 
 static int has_port_num(p4ns_db_cxt_t c,
 			const char *port_nums_key,
 			uint16_t port_num) {
+#if defined(HAVE_REDIS)
   redisReply *reply;
   reply = redisCommand(c, "SISMEMBER %s %d", port_nums_key, port_num);
   int ret = (reply->integer == 1);
   freeReplyObject(reply);
   return ret;
+#else
+  return 0;
+#endif
 }
 
 int p4ns_db_has_port(p4ns_db_cxt_t c,
@@ -172,6 +196,7 @@ int p4ns_db_has_port_num(p4ns_db_cxt_t c,
 
 int p4ns_db_add_port(p4ns_db_cxt_t c,
 		     const char *name, const char *iface, uint16_t port_num) {
+#if defined(HAVE_REDIS)
   redisReply *reply;
   char ports_key[128];
   char port_nums_key[128];
@@ -202,12 +227,14 @@ int p4ns_db_add_port(p4ns_db_cxt_t c,
   reply = redisCommand(c, "SADD %s %d", port_nums_key, port_num);
   assert(reply->integer == 1);
   freeReplyObject(reply);
+#endif
 
   return 0;
 }
 
 int p4ns_db_del_port(p4ns_db_cxt_t c,
 		     const char *name, const char *iface) {
+#if defined(HAVE_REDIS)
   redisReply *reply;
   char ports_key[128];
   char port_nums_key[128];
@@ -234,12 +261,14 @@ int p4ns_db_del_port(p4ns_db_cxt_t c,
   reply = redisCommand(c, "SREM %s %d", port_nums_key, port_num);
   assert(reply->integer == 1);
   freeReplyObject(reply);
+#endif
 
   return 0;
 }
 
 int p4ns_db_del_datapath(p4ns_db_cxt_t c,
 			 const char *name) {
+#if defined(HAVE_REDIS)
   redisReply *reply;
   int success;
   char ports_key[128];
@@ -257,6 +286,7 @@ int p4ns_db_del_datapath(p4ns_db_cxt_t c,
 
   reply = redisCommand(c, "DEL %s", port_nums_key);
   freeReplyObject(reply);
+#endif
   
   return 0;
 }
@@ -264,6 +294,7 @@ int p4ns_db_del_datapath(p4ns_db_cxt_t c,
 int p4ns_db_get_first_port_num(p4ns_db_cxt_t c,
 			       const char *name,
 			       uint16_t *port_num) {
+#if defined(HAVE_REDIS)
   redisReply *reply;
 
   if(!p4ns_db_has_datapath(c, name)) { /* datapath does not exist */
@@ -281,13 +312,16 @@ int p4ns_db_get_first_port_num(p4ns_db_cxt_t c,
     found = reply->integer;
     freeReplyObject(reply); 
   }
+#endif
   
   return 0;
 }
 
 int p4ns_db_flush(p4ns_db_cxt_t c) {
+#if defined(HAVE_REDIS)
   redisReply *reply;
   reply = redisCommand(c, "FLUSHDB");
   freeReplyObject(reply);
+#endif
   return 0;
 }
