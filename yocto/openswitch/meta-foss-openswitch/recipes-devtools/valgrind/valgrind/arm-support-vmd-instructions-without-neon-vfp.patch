Don't try to cleanup the fpscr register that is not available and has
no opcode support for armv7 processors that are without
the SIMD and VFP extensions, since the fmxr/fmrx instructions will throw
a SIGILL, illegal opcode, killing valgrind before it executes the
first instruction of the application under test.

Signed-off-by: Dave Lerner <dave.lerner@windriver.com>
---
 VEX/pub/libvex.h                          |    1 
 coregrind/m_dispatch/dispatch-arm-linux.S |   11 +++++
 coregrind/m_machine.c                     |   19 ++++++++--
 3 files changed, 28 insertions(+), 3 deletions(-)

Index: valgrind-3.10.0/VEX/pub/libvex.h
===================================================================
--- valgrind-3.10.0.orig/VEX/pub/libvex.h	2014-10-15 11:46:01.395815390 -0600
+++ valgrind-3.10.0/VEX/pub/libvex.h	2014-10-15 11:46:01.371815391 -0600
@@ -177,6 +177,7 @@
 #define VEX_HWCAPS_ARM_VFP    (1<<6)  /* VFP extension */
 #define VEX_HWCAPS_ARM_VFP2   (1<<7)  /* VFPv2 */
 #define VEX_HWCAPS_ARM_VFP3   (1<<8)  /* VFPv3 */
+#define VEX_HWCAPS_ARM_FPSCR  (1<<9)  /* FPSCR register (VFPv2,v3 or NEON) */
 /* Bits 15:10 reserved for (possible) future VFP revisions */
 #define VEX_HWCAPS_ARM_NEON   (1<<16) /* Advanced SIMD also known as NEON */
 
Index: valgrind-3.10.0/coregrind/m_dispatch/dispatch-arm-linux.S
===================================================================
--- valgrind-3.10.0.orig/coregrind/m_dispatch/dispatch-arm-linux.S	2014-10-15 11:46:01.395815390 -0600
+++ valgrind-3.10.0/coregrind/m_dispatch/dispatch-arm-linux.S	2014-10-15 11:55:48.399810794 -0600
@@ -66,10 +66,16 @@
            order to keep the stack 8-aligned. */
 	push {r0, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}
 
+        ldr  r4, =VG_(machine_arm_has_fpscr)
+        ldr  r4, [r4]
+        cmp  r4, #0
+        beq  no_fpscr_setup
+
         /* set FPSCR to vex-required default value */
         mov  r4, #0
         fmxr fpscr, r4
 
+no_fpscr_setup:
        	/* Set up the guest state pointer */
         mov r8, r1
 
@@ -91,6 +97,10 @@
            holds a TRC value, and r2 optionally may
            hold another word (for CHAIN_ME exits, the
            address of the place to patch.) */
+	ldr  r4, =VG_(machine_arm_has_fpscr)
+        ldr  r4, [r4]
+        cmp  r4, #0
+        beq  remove_frame 
 
         /* We're leaving.  Check that nobody messed with
            FPSCR in ways we don't expect. */
Index: valgrind-3.10.0/coregrind/m_machine.c
===================================================================
--- valgrind-3.10.0.orig/coregrind/m_machine.c	2014-10-15 11:46:01.395815390 -0600
+++ valgrind-3.10.0/coregrind/m_machine.c	2014-10-15 11:46:01.371815391 -0600
@@ -447,6 +447,7 @@
 #endif
 #if defined(VGA_arm)
 Int VG_(machine_arm_archlevel) = 4;
+UInt VG_(machine_arm_has_fpscr) = 0;
 #endif
 
 
@@ -1357,7 +1358,7 @@
      vki_sigaction_fromK_t saved_sigill_act, saved_sigfpe_act;
      vki_sigaction_toK_t     tmp_sigill_act,   tmp_sigfpe_act;
 
-     volatile Bool have_VFP, have_VFP2, have_VFP3, have_NEON;
+     volatile Bool have_VFP, have_VFP2, have_VFP3, have_NEON, have_FPSCR;
      volatile Int archlevel;
      Int r;
 
@@ -1417,6 +1418,14 @@
         __asm__ __volatile__(".word 0xF2244154"); /* VMOV q2, q2 */
      }
 
+     /* VFP2, VFP3, or SIMD Extension FPSCR register */
+     have_FPSCR = True;
+     if (__builtin_setjmp(env_unsup_insn)) {
+        have_FPSCR = False;
+     } else {
+        __asm__ __volatile__(".word 0xEEE12C10"); /* VMSR FPSCR, r2 */
+     }
+
      /* ARM architecture level */
      archlevel = 5; /* v5 will be base level */
      if (archlevel < 7) {
@@ -1442,11 +1451,13 @@
      VG_(sigaction)(VKI_SIGFPE, &tmp_sigfpe_act, NULL);
      VG_(sigprocmask)(VKI_SIG_SETMASK, &saved_set, NULL);
 
-     VG_(debugLog)(1, "machine", "ARMv%d VFP %d VFP2 %d VFP3 %d NEON %d\n",
+     VG_(debugLog)(1, "machine",
+           "ARMv%d VFP %d VFP2 %d VFP3 %d NEON %d FPSCR %d\n",
            archlevel, (Int)have_VFP, (Int)have_VFP2, (Int)have_VFP3,
-           (Int)have_NEON);
+           (Int)have_NEON, (Int) have_FPSCR);
 
      VG_(machine_arm_archlevel) = archlevel;
+     VG_(machine_arm_has_fpscr) = have_FPSCR;
 
      va = VexArchARM;
      vai.endness = VexEndnessLE;
@@ -1456,6 +1467,8 @@
      if (have_VFP2) vai.hwcaps |= VEX_HWCAPS_ARM_VFP2;
      if (have_VFP)  vai.hwcaps |= VEX_HWCAPS_ARM_VFP;
      if (have_NEON) vai.hwcaps |= VEX_HWCAPS_ARM_NEON;
+     if (have_FPSCR) vai.hwcaps |= VEX_HWCAPS_ARM_FPSCR;
+
 
      VG_(machine_get_cache_info)(&vai);
 
